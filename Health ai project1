{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOE+6UACGnxYspWrKV3JEvR",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "baf90868de9847a391bfd4f89fd794fe": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_a198d5b6a7704f77bd2c849661729ecf",
              "IPY_MODEL_779f8129cc6a497e9c10553d99d8bd0c",
              "IPY_MODEL_9bb0f3031c314d26b1b564f60d7661ff"
            ],
            "layout": "IPY_MODEL_d49ff325ba6e4291b5fa364e94c92ae3"
          }
        },
        "a198d5b6a7704f77bd2c849661729ecf": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_d31774a03d404fc5beabb13960c163bf",
            "placeholder": "​",
            "style": "IPY_MODEL_88042c44fe8b4ec7b832fb59dec5ab9c",
            "value": "tokenizer_config.json: "
          }
        },
        "779f8129cc6a497e9c10553d99d8bd0c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_eeedd364674e43698633149e74fe199b",
            "max": 1,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_21e7d4b01b304b6faee1c1571fb524ac",
            "value": 1
          }
        },
        "9bb0f3031c314d26b1b564f60d7661ff": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_8a7add7d5a2042799545a9fd5081aa35",
            "placeholder": "​",
            "style": "IPY_MODEL_902c8fab56324235b5e789ba748b567c",
            "value": " 8.88k/? [00:00&lt;00:00, 569kB/s]"
          }
        },
        "d49ff325ba6e4291b5fa364e94c92ae3": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d31774a03d404fc5beabb13960c163bf": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "88042c44fe8b4ec7b832fb59dec5ab9c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "eeedd364674e43698633149e74fe199b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "20px"
          }
        },
        "21e7d4b01b304b6faee1c1571fb524ac": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "8a7add7d5a2042799545a9fd5081aa35": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "902c8fab56324235b5e789ba748b567c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "18b3054de4ad4391a611f490be56abba": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_901ea3f079d1464d8c4a1fefb49a5429",
              "IPY_MODEL_165b162d29cd4e88a418b5b9f797fb1d",
              "IPY_MODEL_bf07a979e3da43eca159d3531940029e"
            ],
            "layout": "IPY_MODEL_02a9e32e6b0f4ab19e0b9b84a647983e"
          }
        },
        "901ea3f079d1464d8c4a1fefb49a5429": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_1017726a2b214ef0aabc6f73d7724092",
            "placeholder": "​",
            "style": "IPY_MODEL_acc30c33a4f9450aba6931ee3eb74c9b",
            "value": "vocab.json: "
          }
        },
        "165b162d29cd4e88a418b5b9f797fb1d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_416236064dd14260abd36b0c8ba20275",
            "max": 1,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_73d5a2910e4942fb9461438752d47800",
            "value": 1
          }
        },
        "bf07a979e3da43eca159d3531940029e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_b40638f76ffb4642ac30df1ad840888d",
            "placeholder": "​",
            "style": "IPY_MODEL_55115cc0eba34cd7912d884130ff16d1",
            "value": " 777k/? [00:00&lt;00:00, 7.42MB/s]"
          }
        },
        "02a9e32e6b0f4ab19e0b9b84a647983e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1017726a2b214ef0aabc6f73d7724092": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "acc30c33a4f9450aba6931ee3eb74c9b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "416236064dd14260abd36b0c8ba20275": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "20px"
          }
        },
        "73d5a2910e4942fb9461438752d47800": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "b40638f76ffb4642ac30df1ad840888d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "55115cc0eba34cd7912d884130ff16d1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "19a362b1af5b4c55a2e638cb20bcd289": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_ed7b80e2b48a4439b01abf55939ea80a",
              "IPY_MODEL_c1105b26b9984bb3b4345a31fbef5188",
              "IPY_MODEL_c09e9e3de3cd4b87817e5e35ab909067"
            ],
            "layout": "IPY_MODEL_5b860cfe62624005a07aa5d13ad84ab8"
          }
        },
        "ed7b80e2b48a4439b01abf55939ea80a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ed7ae8925de941b4a5a87c776bde4d1c",
            "placeholder": "​",
            "style": "IPY_MODEL_0ce57272b78f431db0b49f686f8e85be",
            "value": "merges.txt: "
          }
        },
        "c1105b26b9984bb3b4345a31fbef5188": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_cb1bc974385d48e486c8b86dc1d4181c",
            "max": 1,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_3e4eafd0e2e641b0b0b49716fe2dbf2d",
            "value": 1
          }
        },
        "c09e9e3de3cd4b87817e5e35ab909067": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_07621c9211dc4bfba3c717762028a9c8",
            "placeholder": "​",
            "style": "IPY_MODEL_376e13abaf18417696a81cc02626a3e6",
            "value": " 442k/? [00:00&lt;00:00, 17.4MB/s]"
          }
        },
        "5b860cfe62624005a07aa5d13ad84ab8": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ed7ae8925de941b4a5a87c776bde4d1c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "0ce57272b78f431db0b49f686f8e85be": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "cb1bc974385d48e486c8b86dc1d4181c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "20px"
          }
        },
        "3e4eafd0e2e641b0b0b49716fe2dbf2d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "07621c9211dc4bfba3c717762028a9c8": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "376e13abaf18417696a81cc02626a3e6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "c1c7fc8bd65642afb84959f378cde9c0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_800abec842c34cccb573238472c4ef20",
              "IPY_MODEL_7d631adc49bc45d28280d12ab86346c2",
              "IPY_MODEL_284e4bf313da45e0a61d33737489cf1e"
            ],
            "layout": "IPY_MODEL_3ee57a88be054c858165dd7e9a33da96"
          }
        },
        "800abec842c34cccb573238472c4ef20": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_5fff7d04d4154df49aada94636134bc3",
            "placeholder": "​",
            "style": "IPY_MODEL_61aefd6d69fe4cb8b3dcd3d5783e57ca",
            "value": "tokenizer.json: "
          }
        },
        "7d631adc49bc45d28280d12ab86346c2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_c4a349ec0f5542bab2ec6ff96d8d8ed0",
            "max": 1,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_8f5a9c784caf4fd789561f5bb7bb9d7f",
            "value": 1
          }
        },
        "284e4bf313da45e0a61d33737489cf1e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_7b7592cee23741ec80bf0c29c06436e3",
            "placeholder": "​",
            "style": "IPY_MODEL_f78a152d65574614b0d1b99236a08923",
            "value": " 3.48M/? [00:00&lt;00:00, 60.4MB/s]"
          }
        },
        "3ee57a88be054c858165dd7e9a33da96": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "5fff7d04d4154df49aada94636134bc3": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "61aefd6d69fe4cb8b3dcd3d5783e57ca": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "c4a349ec0f5542bab2ec6ff96d8d8ed0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "20px"
          }
        },
        "8f5a9c784caf4fd789561f5bb7bb9d7f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "7b7592cee23741ec80bf0c29c06436e3": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f78a152d65574614b0d1b99236a08923": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "0cff3bd15cfc4be4ab3f61ce467fd563": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_e939391a011d4291bdad68e34642b357",
              "IPY_MODEL_5de82881732f43679420ad028dd33137",
              "IPY_MODEL_2b3964c8cf5b47cbad431ceb44f710cc"
            ],
            "layout": "IPY_MODEL_985f5c1841a74450b5f257eed1100ce0"
          }
        },
        "e939391a011d4291bdad68e34642b357": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_8bed1304e0664f5a8751407e7431bc86",
            "placeholder": "​",
            "style": "IPY_MODEL_8a35cba4024d40f5b199ffea20811c3b",
            "value": "added_tokens.json: 100%"
          }
        },
        "5de82881732f43679420ad028dd33137": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_7701e559d01d4d508b67815a2f29de52",
            "max": 87,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_fe802d9f3956412d88a45b85d87b54e0",
            "value": 87
          }
        },
        "2b3964c8cf5b47cbad431ceb44f710cc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_f86429504e18463194fdbeb5bce8f307",
            "placeholder": "​",
            "style": "IPY_MODEL_2c8fbe69ad1e41d684d79f8c9b102fe6",
            "value": " 87.0/87.0 [00:00&lt;00:00, 7.39kB/s]"
          }
        },
        "985f5c1841a74450b5f257eed1100ce0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8bed1304e0664f5a8751407e7431bc86": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8a35cba4024d40f5b199ffea20811c3b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "7701e559d01d4d508b67815a2f29de52": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "fe802d9f3956412d88a45b85d87b54e0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "f86429504e18463194fdbeb5bce8f307": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2c8fbe69ad1e41d684d79f8c9b102fe6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "b300a3878ca740d3b625150d8c3212a6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_797195a48d494595a97a3d18f2d4fc42",
              "IPY_MODEL_3a6706c798004d70b080ebcdaf021c00",
              "IPY_MODEL_e68b5ac30ce84bccabc9f5ba13c0bbd0"
            ],
            "layout": "IPY_MODEL_db81162a89964b39a02f88566814d12c"
          }
        },
        "797195a48d494595a97a3d18f2d4fc42": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_e0be4fe9d7c44092ac922f83154f6355",
            "placeholder": "​",
            "style": "IPY_MODEL_60fadfbb601c44f5b947250f18416667",
            "value": "special_tokens_map.json: 100%"
          }
        },
        "3a6706c798004d70b080ebcdaf021c00": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_17426222db8e4ce58ba5646da9a0c8bf",
            "max": 701,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_79ce9a61f5d54a6eb273f650833ff88c",
            "value": 701
          }
        },
        "e68b5ac30ce84bccabc9f5ba13c0bbd0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_9a625f98f891415fb1e6bd68f068b702",
            "placeholder": "​",
            "style": "IPY_MODEL_c627d21a51644edab32739a48ab55ea4",
            "value": " 701/701 [00:00&lt;00:00, 34.3kB/s]"
          }
        },
        "db81162a89964b39a02f88566814d12c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e0be4fe9d7c44092ac922f83154f6355": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "60fadfbb601c44f5b947250f18416667": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "17426222db8e4ce58ba5646da9a0c8bf": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "79ce9a61f5d54a6eb273f650833ff88c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "9a625f98f891415fb1e6bd68f068b702": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c627d21a51644edab32739a48ab55ea4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "6c087cc1e50f46b09ea938f54a7d75e7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_1c499581e3ac438496d82a3ff6f5545e",
              "IPY_MODEL_02394c13ca9c4ed695d562f73a0e13d7",
              "IPY_MODEL_dd28ce99000445758977308ca61fac63"
            ],
            "layout": "IPY_MODEL_0b80626795ea4d3dbdf7792102080960"
          }
        },
        "1c499581e3ac438496d82a3ff6f5545e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ae31a2ea9b844dc4a110e8cb19dad7dc",
            "placeholder": "​",
            "style": "IPY_MODEL_5cfac1a9b42f4a4782f4d6ef1ad065d0",
            "value": "config.json: 100%"
          }
        },
        "02394c13ca9c4ed695d562f73a0e13d7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_9c9f8b0332a246a2b87f9f3cf98fd49d",
            "max": 786,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_dd46e97fb6e74271a0391d7d5cc3e17b",
            "value": 786
          }
        },
        "dd28ce99000445758977308ca61fac63": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_e9fbd6034e5d4e668f95e5954b140fcf",
            "placeholder": "​",
            "style": "IPY_MODEL_5cf59a956ad043d5a87c08e8a625c5ba",
            "value": " 786/786 [00:00&lt;00:00, 52.3kB/s]"
          }
        },
        "0b80626795ea4d3dbdf7792102080960": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ae31a2ea9b844dc4a110e8cb19dad7dc": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "5cfac1a9b42f4a4782f4d6ef1ad065d0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "9c9f8b0332a246a2b87f9f3cf98fd49d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "dd46e97fb6e74271a0391d7d5cc3e17b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "e9fbd6034e5d4e668f95e5954b140fcf": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "5cf59a956ad043d5a87c08e8a625c5ba": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "86bbb3cea2d9420e97750419564c2f1a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_e5414ab2a605455cb75b2b3a953cb630",
              "IPY_MODEL_f563ff127df34680ae5943907c571ab8",
              "IPY_MODEL_5fbc7736c3c94a9e86ac22f389ee53c7"
            ],
            "layout": "IPY_MODEL_040e263b97fa477c989e35a66f2145f3"
          }
        },
        "e5414ab2a605455cb75b2b3a953cb630": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ff344277d4154c12a44093952554fd51",
            "placeholder": "​",
            "style": "IPY_MODEL_b800b924db2f438081481b782863ba3e",
            "value": "model.safetensors.index.json: "
          }
        },
        "f563ff127df34680ae5943907c571ab8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_997b33eb76554c55a439fb6b638166ad",
            "max": 1,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_d54c0868d5f14404be055d635b3dbf3b",
            "value": 1
          }
        },
        "5fbc7736c3c94a9e86ac22f389ee53c7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ce4afb05f834481b9b99ab5959bdd105",
            "placeholder": "​",
            "style": "IPY_MODEL_2b63a207b632458a8b35f27bea24a431",
            "value": " 29.8k/? [00:00&lt;00:00, 608kB/s]"
          }
        },
        "040e263b97fa477c989e35a66f2145f3": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ff344277d4154c12a44093952554fd51": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b800b924db2f438081481b782863ba3e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "997b33eb76554c55a439fb6b638166ad": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "20px"
          }
        },
        "d54c0868d5f14404be055d635b3dbf3b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "ce4afb05f834481b9b99ab5959bdd105": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2b63a207b632458a8b35f27bea24a431": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "0b0948412bb9411d82ab3c18c4f88ec6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_3fe589b80acd4352a05c8537c346022a",
              "IPY_MODEL_07c124ac83224ecb8c063db8ebf191d8",
              "IPY_MODEL_84b09da6204f4ff4b75f0aa192ec19dc"
            ],
            "layout": "IPY_MODEL_988a7578d37d4ef8986fcf44a48503e4"
          }
        },
        "3fe589b80acd4352a05c8537c346022a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_8cb42f4477b4437b8f4143dafa757688",
            "placeholder": "​",
            "style": "IPY_MODEL_72bf50439a09482cbb8ad2fb85da8b02",
            "value": "Fetching 2 files: 100%"
          }
        },
        "07c124ac83224ecb8c063db8ebf191d8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_a52c19fce10f459fb83e7f24407c85cd",
            "max": 2,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_d6c30574645c47adb500a0c6f07a34f5",
            "value": 2
          }
        },
        "84b09da6204f4ff4b75f0aa192ec19dc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_858bfe87c7d743e999d1dd6e86467a5c",
            "placeholder": "​",
            "style": "IPY_MODEL_6b8f20b2736443bd8604cf4e26345658",
            "value": " 2/2 [04:36&lt;00:00, 276.21s/it]"
          }
        },
        "988a7578d37d4ef8986fcf44a48503e4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8cb42f4477b4437b8f4143dafa757688": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "72bf50439a09482cbb8ad2fb85da8b02": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "a52c19fce10f459fb83e7f24407c85cd": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d6c30574645c47adb500a0c6f07a34f5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "858bfe87c7d743e999d1dd6e86467a5c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6b8f20b2736443bd8604cf4e26345658": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "b5bcf10d8e1c4e1b9a6aeb746fdd8534": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_99d445c55725450e9d1125a83f392c85",
              "IPY_MODEL_420e27bfdc4340e4a8b56d619bac6c26",
              "IPY_MODEL_6b66eab90a504a92a68a9a0453475b18"
            ],
            "layout": "IPY_MODEL_de258144aca140feb79f01fa8fdc1910"
          }
        },
        "99d445c55725450e9d1125a83f392c85": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_01d7d64c65cd4f40833cc9a7c54d470a",
            "placeholder": "​",
            "style": "IPY_MODEL_8b49a0a519084b57885404349735dbc3",
            "value": "model-00001-of-00002.safetensors: 100%"
          }
        },
        "420e27bfdc4340e4a8b56d619bac6c26": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_77401143cc264e918936d75cb28f3bb4",
            "max": 4999983456,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_583afdf0d6b145d988547bf4ed385f3c",
            "value": 4999983456
          }
        },
        "6b66eab90a504a92a68a9a0453475b18": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_0996ebe550be43c3b4ac8a40acbae749",
            "placeholder": "​",
            "style": "IPY_MODEL_7fba821697a548f39550621c8f01704a",
            "value": " 5.00G/5.00G [04:35&lt;00:00, 26.2MB/s]"
          }
        },
        "de258144aca140feb79f01fa8fdc1910": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "01d7d64c65cd4f40833cc9a7c54d470a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8b49a0a519084b57885404349735dbc3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "77401143cc264e918936d75cb28f3bb4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "583afdf0d6b145d988547bf4ed385f3c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "0996ebe550be43c3b4ac8a40acbae749": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "7fba821697a548f39550621c8f01704a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "35b1965e81ef483eb1910c8e23db7268": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_2c140bf3f51344aaa0cfde96e4d76d1b",
              "IPY_MODEL_cd8c1878d1b54cee9e3bc3ec8b13b8a0",
              "IPY_MODEL_91d1c149294f45f5829a080a45130145"
            ],
            "layout": "IPY_MODEL_17065afb47f94899878d129fd063f5d4"
          }
        },
        "2c140bf3f51344aaa0cfde96e4d76d1b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_b86d2ceb943940538062f7c89f452c1c",
            "placeholder": "​",
            "style": "IPY_MODEL_1f705afc4f0a4ce88c794ad88fa8909e",
            "value": "model-00002-of-00002.safetensors: 100%"
          }
        },
        "cd8c1878d1b54cee9e3bc3ec8b13b8a0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_07ec674eda1a45c0ba68bbab5d8fac48",
            "max": 67121712,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_98430a82ed2d4637b6d53465a5bbc1b5",
            "value": 67121712
          }
        },
        "91d1c149294f45f5829a080a45130145": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_d086c19ce34e4ef59bc05d3e00f91d1e",
            "placeholder": "​",
            "style": "IPY_MODEL_1d9cb1769d0b43c0a7f57bc92f1b198f",
            "value": " 67.1M/67.1M [00:40&lt;00:00, 1.42MB/s]"
          }
        },
        "17065afb47f94899878d129fd063f5d4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b86d2ceb943940538062f7c89f452c1c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1f705afc4f0a4ce88c794ad88fa8909e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "07ec674eda1a45c0ba68bbab5d8fac48": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "98430a82ed2d4637b6d53465a5bbc1b5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "d086c19ce34e4ef59bc05d3e00f91d1e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1d9cb1769d0b43c0a7f57bc92f1b198f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "33771aa5bb8a47208035349426bb98d2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_8cd98e60eaca4931a2d112fa046c0498",
              "IPY_MODEL_93ea4ce0d89e463d8644e2710d073ba4",
              "IPY_MODEL_060d3460ac134361b9ca0c8cbf727ada"
            ],
            "layout": "IPY_MODEL_e83a759ff32a4b81861a89abd296d2f5"
          }
        },
        "8cd98e60eaca4931a2d112fa046c0498": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_6d8fe4db91b240e7a9efcb401f743845",
            "placeholder": "​",
            "style": "IPY_MODEL_8c985e198151422482a6125cde02cec1",
            "value": "Loading checkpoint shards: 100%"
          }
        },
        "93ea4ce0d89e463d8644e2710d073ba4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_02c6ea04f4d949c6b6fd58bb6ff9b79a",
            "max": 2,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_2f654ff010414b9ba248d35aa33debe8",
            "value": 2
          }
        },
        "060d3460ac134361b9ca0c8cbf727ada": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_6dbca0ca8e58438d9d4ed93f647e4545",
            "placeholder": "​",
            "style": "IPY_MODEL_5126843824a74712abfeb58e7297087a",
            "value": " 2/2 [00:36&lt;00:00, 15.30s/it]"
          }
        },
        "e83a759ff32a4b81861a89abd296d2f5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6d8fe4db91b240e7a9efcb401f743845": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8c985e198151422482a6125cde02cec1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "02c6ea04f4d949c6b6fd58bb6ff9b79a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2f654ff010414b9ba248d35aa33debe8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "6dbca0ca8e58438d9d4ed93f647e4545": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "5126843824a74712abfeb58e7297087a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "ce7d7f264b5147678ce6745192592920": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_f5f01dd80b5b440cb83ffc370fffd0a5",
              "IPY_MODEL_67c20183d2c64b0ab576c958cf366ec4",
              "IPY_MODEL_793ce1ed26194d21ab86adb5df2259aa"
            ],
            "layout": "IPY_MODEL_e16e49ca300f4be28c2bd6efd6bb25e4"
          }
        },
        "f5f01dd80b5b440cb83ffc370fffd0a5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_6d5cbf93156f4d82a1526b79b6a2c43d",
            "placeholder": "​",
            "style": "IPY_MODEL_3e19d97998914b47b41641cba3a2cac9",
            "value": "generation_config.json: 100%"
          }
        },
        "67c20183d2c64b0ab576c958cf366ec4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_36ec63f0c8c644768eef949083ba7379",
            "max": 137,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_04d5ec674dc94437aa32511881faa6f9",
            "value": 137
          }
        },
        "793ce1ed26194d21ab86adb5df2259aa": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_cec2a62c4fb74f3c8715e15804048c31",
            "placeholder": "​",
            "style": "IPY_MODEL_e462a3b18ee84c7ab3891e2520b66852",
            "value": " 137/137 [00:00&lt;00:00, 8.44kB/s]"
          }
        },
        "e16e49ca300f4be28c2bd6efd6bb25e4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6d5cbf93156f4d82a1526b79b6a2c43d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3e19d97998914b47b41641cba3a2cac9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "36ec63f0c8c644768eef949083ba7379": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "04d5ec674dc94437aa32511881faa6f9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "cec2a62c4fb74f3c8715e15804048c31": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e462a3b18ee84c7ab3891e2520b66852": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Gokul302005/Gokul1/blob/main/Health%20ai%20project1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 383
        },
        "id": "oltLAbzTRbhi",
        "outputId": "9e661152-34e5-4ba8-9212-6f59fd7b6742"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "ModuleNotFoundError",
          "evalue": "No module named 'streamlit'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-3513690528.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mplotly\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexpress\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpx\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mstreamlit\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mst\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mdatetime\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdatetime\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'streamlit'",
            "",
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"
          ],
          "errorDetails": {
            "actions": [
              {
                "action": "open_url",
                "actionText": "Open Examples",
                "url": "/notebooks/snippets/importing_libraries.ipynb"
              }
            ]
          }
        }
      ],
      "source": [
        "import io\n",
        "import json\n",
        "import base64\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import plotly.express as px\n",
        "import streamlit as st\n",
        "from datetime import datetime\n",
        "\n",
        "# ---------------------------\n",
        "# Utility & risk calculations\n",
        "# ---------------------------\n",
        "def sigmoid(x):\n",
        "    return 1 / (1 + np.exp(-x))\n",
        "\n",
        "def compute_bmi(height_cm: float, weight_kg: float) -> float:\n",
        "    if height_cm is None or weight_kg is None or height_cm <= 0:\n",
        "        return np.nan\n",
        "    return weight_kg / ((height_cm / 100) ** 2)\n",
        "\n",
        "def clip_num(x, lo, hi):\n",
        "    try:\n",
        "        return float(np.clip(float(x), lo, hi))\n",
        "    except Exception:\n",
        "        return np.nan\n",
        "\n",
        "def normalize(x, mean, std, lo=None, hi=None):\n",
        "    \"\"\"Z-score then clip to [-3, 3] for stability.\"\"\"\n",
        "    if x is None or pd.isna(x):\n",
        "        return 0.0\n",
        "    z = (float(x) - mean) / (std if std > 0 else 1.0)\n",
        "    z = float(np.clip(z, -3, 3))\n",
        "    if lo is not None and hi is not None:\n",
        "        return float(np.clip(z, lo, hi))\n",
        "    return z\n",
        "\n",
        "def risk_model(features: dict):\n",
        "    \"\"\"\n",
        "    Simple transparent rule-based scoring mapped through sigmoid to produce\n",
        "    pseudo-probabilities. This is NOT a medical model.\n",
        "    Inputs (features):\n",
        "      age, sex, height_cm, weight_kg, bmi, systolic_bp, diastolic_bp,\n",
        "      fasting_glucose, hba1c, total_chol, hdl, ldl,\n",
        "      smoker(bool), family_history(bool), activity_minutes_per_week\n",
        "    Returns dict of risks in [0,1].\n",
        "    \"\"\"\n",
        "\n",
        "    # Extract features with defaults\n",
        "    age = features.get(\"age\", 35)\n",
        "    bmi = features.get(\"bmi\", np.nan)\n",
        "    sys_bp = features.get(\"systolic_bp\", 120)\n",
        "    dia_bp = features.get(\"diastolic_bp\", 80)\n",
        "    fbg = features.get(\"fasting_glucose\", 95)\n",
        "    hba1c = features.get(\"hba1c\", 5.3)\n",
        "    chol = features.get(\"total_chol\", 180)\n",
        "    hdl = features.get(\"hdl\", 50)\n",
        "    ldl = features.get(\"ldl\", 110)\n",
        "    smoker = 1.0 if features.get(\"smoker\", False) else 0.0\n",
        "    fam = 1.0 if features.get(\"family_history\", False) else 0.0\n",
        "    act = features.get(\"activity_minutes_per_week\", 60)\n",
        "\n",
        "    # Normalizations (rough population-ish priors)\n",
        "    n_age = normalize(age, 45, 12)\n",
        "    n_bmi = normalize(bmi, 26, 5)\n",
        "    n_sys = normalize(sys_bp, 125, 15)\n",
        "    n_dia = normalize(dia_bp, 80, 10)\n",
        "    n_fbg = normalize(fbg, 95, 12)\n",
        "    n_a1c = normalize(hba1c, 5.4, 0.5)\n",
        "    n_chol = normalize(chol, 190, 35)\n",
        "    n_hdl = -normalize(hdl, 55, 12)  # higher HDL reduces risk\n",
        "    n_ldl = normalize(ldl, 120, 30)\n",
        "    n_act = -normalize(act, 120, 60)  # more activity reduces risk\n",
        "\n",
        "    # Diabetes risk score\n",
        "    # drivers: BMI, fasting glucose, HbA1c, age, activity, family history\n",
        "    d_score = (\n",
        "        0.9 * n_bmi\n",
        "        + 1.2 * n_fbg\n",
        "        + 1.2 * n_a1c\n",
        "        + 0.5 * n_age\n",
        "        + 0.5 * n_act\n",
        "        + 0.6 * fam\n",
        "        + 0.3 * smoker\n",
        "        - 0.2  # baseline\n",
        "    )\n",
        "    diabetes = float(sigmoid(d_score))\n",
        "\n",
        "    # Heart disease risk score\n",
        "    # drivers: age, total chol, LDL, HDL (protective), BP, smoking, family history, activity\n",
        "    h_score = (\n",
        "        0.8 * n_age\n",
        "        + 0.8 * n_chol\n",
        "        + 0.7 * n_ldl\n",
        "        + 0.6 * n_sys\n",
        "        + 0.3 * n_dia\n",
        "        + 0.8 * smoker\n",
        "        + 0.6 * fam\n",
        "        + 0.5 * n_bmi\n",
        "        + 0.5 * n_act\n",
        "        - 0.3\n",
        "        + 0.8 * n_hdl  # already negative\n",
        "    )\n",
        "    heart = float(sigmoid(h_score))\n",
        "\n",
        "    # Hypertension risk score\n",
        "    # drivers: systolic/diastolic BP, BMI, age, smoking, family history, activity\n",
        "    ht_score = (\n",
        "        1.2 * n_sys\n",
        "        + 0.8 * n_dia\n",
        "        + 0.6 * n_bmi\n",
        "        + 0.6 * n_age\n",
        "        + 0.4 * smoker\n",
        "        + 0.5 * fam\n",
        "        + 0.4 * n_act\n",
        "        - 0.2\n",
        "    )\n",
        "    htn = float(sigmoid(ht_score))\n",
        "\n",
        "    return {\n",
        "        \"diabetes_risk\": round(diabetes, 3),\n",
        "        \"heart_disease_risk\": round(heart, 3),\n",
        "        \"hypertension_risk\": round(htn, 3),\n",
        "    }\n",
        "\n",
        "def risk_band(p):\n",
        "    if p >= 0.67:\n",
        "        return \"High\"\n",
        "    if p >= 0.34:\n",
        "        return \"Moderate\"\n",
        "    return \"Low\"\n",
        "\n",
        "def make_care_plan(features, risks):\n",
        "    bmi = features.get(\"bmi\", np.nan)\n",
        "    act = features.get(\"activity_minutes_per_week\", 0)\n",
        "    sys_bp = features.get(\"systolic_bp\", 120)\n",
        "    fbg = features.get(\"fasting_glucose\", 95)\n",
        "    hba1c = features.get(\"hba1c\", 5.3)\n",
        "    smoker = features.get(\"smoker\", False)\n",
        "\n",
        "    # Key risk bands\n",
        "    d_band = risk_band(risks[\"diabetes_risk\"])\n",
        "    h_band = risk_band(risks[\"heart_disease_risk\"])\n",
        "    t_band = risk_band(risks[\"hypertension_risk\"])\n",
        "\n",
        "    plan = []\n",
        "    plan.append(\"⚠️ This autogenerated plan is not medical advice. Consult a clinician.\")\n",
        "\n",
        "    # General\n",
        "    if pd.notna(bmi):\n",
        "        if bmi >= 30:\n",
        "            plan.append(\"• Weight management: target 5–10% weight loss over 6–12 months.\")\n",
        "        elif bmi >= 25:\n",
        "            plan.append(\"• Aim to reach BMI < 25 with gradual lifestyle changes.\")\n",
        "        else:\n",
        "            plan.append(\"• Maintain current healthy weight with balanced nutrition.\")\n",
        "\n",
        "    if act < 150:\n",
        "        plan.append(\"• Physical activity: build to ≥150 min/week moderate activity (+ 2 strength days).\")\n",
        "    else:\n",
        "        plan.append(\"• Keep ≥150 min/week activity; add flexibility/strength work 2–3×/week.\")\n",
        "\n",
        "    if smoker:\n",
        "        plan.append(\"• Smoking: begin a cessation plan (set quit date, NRT or meds per clinician).\")\n",
        "\n",
        "    # Condition-specific\n",
        "    if d_band in [\"Moderate\", \"High\"] or fbg >= 100 or hba1c >= 5.7:\n",
        "        plan.append(\"• Glucose management: reduce refined carbs/sugary drinks; prefer high-fiber foods.\")\n",
        "        plan.append(\"• Monitor fasting glucose weekly; discuss HbA1c testing cadence (e.g., q3–6 months).\")\n",
        "\n",
        "    if t_band in [\"Moderate\", \"High\"] or sys_bp >= 130:\n",
        "        plan.append(\"• BP: limit sodium (~1.5–2 g/day), follow DASH-style diet, regular home BP logs.\")\n",
        "        plan.append(\"• Sleep hygiene: 7–9 h/night; screen for sleep apnea if snoring/daytime fatigue.\")\n",
        "\n",
        "    if h_band in [\"Moderate\", \"High\"]:\n",
        "        plan.append(\"• Lipids/heart: prioritize unsaturated fats, fish 2×/week, soluble fiber.\")\n",
        "        plan.append(\"• Add stress management: daily 10-min breathing/meditation; social support.\")\n",
        "\n",
        "    # Follow-up\n",
        "    plan.append(\"• Schedule preventive care visit; share home logs (BP/weight/glucose) with clinician.\")\n",
        "    return \"\\n\".join(plan)\n",
        "\n",
        "def to_download_button(data: bytes, filename: str, label: str):\n",
        "    b64 = base64.b64encode(data).decode()\n",
        "    href = f'<a href=\"data:file/txt;base64,{b64}\" download=\"{filename}\">{label}</a>'\n",
        "    return href\n",
        "\n",
        "# ---------------------------\n",
        "# Streamlit UI\n",
        "# ---------------------------\n",
        "st.set_page_config(page_title=\"Healthcare Assistant\", page_icon=\"🩺\", layout=\"wide\")\n",
        "\n",
        "st.title(\"🩺 Healthcare Assistant (Demo)\")\n",
        "st.caption(\"Educational tool — not for medical use.\")\n",
        "\n",
        "with st.sidebar:\n",
        "    st.header(\"Patient Intake\")\n",
        "    colA, colB = st.columns(2)\n",
        "    with colA:\n",
        "        age = st.number_input(\"Age\", min_value=0, max_value=120, value=35, step=1)\n",
        "        height_cm = st.number_input(\"Height (cm)\", min_value=80, max_value=250, value=170)\n",
        "        systolic_bp = st.number_input(\"Systolic BP\", min_value=70, max_value=250, value=122)\n",
        "        fasting_glucose = st.number_input(\"Fasting Glucose (mg/dL)\", min_value=50, max_value=400, value=95)\n",
        "        total_chol = st.number_input(\"Total Cholesterol (mg/dL)\", min_value=80, max_value=400, value=180)\n",
        "        hdl = st.number_input(\"HDL (mg/dL)\", min_value=10, max_value=120, value=50)\n",
        "    with colB:\n",
        "        sex = st.selectbox(\"Sex\", [\"Female\", \"Male\", \"Other\"])\n",
        "        weight_kg = st.number_input(\"Weight (kg)\", min_value=20.0, max_value=250.0, value=70.0, step=0.1)\n",
        "        diastolic_bp = st.number_input(\"Diastolic BP\", min_value=40, max_value=150, value=80)\n",
        "        hba1c = st.number_input(\"HbA1c (%)\", min_value=4.0, max_value=15.0, value=5.3, step=0.1)\n",
        "        ldl = st.number_input(\"LDL (mg/dL)\", min_value=30, max_value=300, value=110)\n",
        "        activity_minutes_per_week = st.number_input(\"Activity (min/week)\", min_value=0, max_value=2000, value=60, step=10)\n",
        "\n",
        "    smoker = st.checkbox(\"Currently smokes\")\n",
        "    family_history = st.checkbox(\"Family history of cardiometabolic disease\")\n",
        "\n",
        "    calc_bmi = compute_bmi(height_cm, weight_kg)\n",
        "    st.markdown(f\"**BMI:** {calc_bmi:.1f}\" if not pd.isna(calc_bmi) else \"**BMI:** —\")\n",
        "\n",
        "    if st.button(\"Predict Risks\"):\n",
        "        st.session_state[\"inputs\"] = {\n",
        "            \"age\": age,\n",
        "            \"sex\": sex,\n",
        "            \"height_cm\": height_cm,\n",
        "            \"weight_kg\": weight_kg,\n",
        "            \"bmi\": calc_bmi,\n",
        "            \"systolic_bp\": systolic_bp,\n",
        "            \"diastolic_bp\": diastolic_bp,\n",
        "            \"fasting_glucose\": fasting_glucose,\n",
        "            \"hba1c\": hba1c,\n",
        "            \"total_chol\": total_chol,\n",
        "            \"hdl\": hdl,\n",
        "            \"ldl\": ldl,\n",
        "            \"smoker\": smoker,\n",
        "            \"family_history\": family_history,\n",
        "            \"activity_minutes_per_week\": activity_minutes_per_week,\n",
        "        }\n",
        "        st.session_state[\"risks\"] = risk_model(st.session_state[\"inputs\"])\n",
        "        st.session_state[\"plan\"] = make_care_plan(st.session_state[\"inputs\"], st.session_state[\"risks\"])\n",
        "\n",
        "# Main layout\n",
        "tab_pred, tab_plan, tab_dash, tab_help = st.tabs(\n",
        "    [\"🧪 Predictions\", \"🗂 Care Plan\", \"📊 Dashboards\", \"ℹ️ Help & Template\"]\n",
        ")\n",
        "\n",
        "with tab_pred:\n",
        "    st.subheader(\"Predicted Risks\")\n",
        "    if \"risks\" in st.session_state:\n",
        "        risks = st.session_state[\"risks\"]\n",
        "        df_risk = pd.DataFrame(\n",
        "            {\n",
        "                \"Condition\": [\"Diabetes\", \"Heart Disease\", \"Hypertension\"],\n",
        "                \"Risk\": [risks[\"diabetes_risk\"], risks[\"heart_disease_risk\"], risks[\"hypertension_risk\"]],\n",
        "                \"Band\": [\n",
        "                    risk_band(risks[\"diabetes_risk\"]),\n",
        "                    risk_band(risks[\"heart_disease_risk\"]),\n",
        "                    risk_band(risks[\"hypertension_risk\"]),\n",
        "                ],\n",
        "            }\n",
        "        )\n",
        "        c1, c2 = st.columns([2, 1])\n",
        "        with c1:\n",
        "            fig = px.bar(\n",
        "                df_risk, x=\"Condition\", y=\"Risk\", color=\"Band\", range_y=[0, 1],\n",
        "                text=df_risk[\"Risk\"].map(lambda x: f\"{x:.2f}\")\n",
        "            )\n",
        "            fig.update_layout(yaxis_title=\"Risk (0–1)\", xaxis_title=\"\", uniformtext_minsize=10, uniformtext_mode=\"hide\")\n",
        "            st.plotly_chart(fig, use_container_width=True)\n",
        "        with c2:\n",
        "            st.dataframe(df_risk, use_container_width=True)\n",
        "        st.success(\"Predictions generated. See the Care Plan tab for suggestions.\")\n",
        "    else:\n",
        "        st.info(\"Use the sidebar to enter patient details and click **Predict Risks**.\")\n",
        "\n",
        "with tab_plan:\n",
        "    st.subheader(\"Autogenerated Care Plan (Demo)\")\n",
        "    if \"plan\" in st.session_state and \"inputs\" in st.session_state:\n",
        "        st.text(st.session_state[\"plan\"])\n",
        "\n",
        "        # Download plan with inputs and risks as a text file\n",
        "        report = {\n",
        "            \"timestamp\": datetime.utcnow().isoformat() + \"Z\",\n",
        "            \"inputs\": st.session_state[\"inputs\"],\n",
        "            \"risks\": st.session_state[\"risks\"],\n",
        "            \"plan\": st.session_state[\"plan\"],\n",
        "        }\n",
        "        txt = (\n",
        "            \"Healthcare Assistant Report (Demo)\\n\"\n",
        "            \"=================================\\n\\n\"\n",
        "            f\"Timestamp (UTC): {report['timestamp']}\\n\\n\"\n",
        "            \"Inputs:\\n\"\n",
        "            + json.dumps(report[\"inputs\"], indent=2)\n",
        "            + \"\\n\\nRisks:\\n\"\n",
        "            + json.dumps(report[\"risks\"], indent=2)\n",
        "            + \"\\n\\nPlan:\\n\"\n",
        "            + report[\"plan\"]\n",
        "            + \"\\n\"\n",
        "        ).encode()\n",
        "        st.download_button(\n",
        "            \"Download Plan & Report (.txt)\",\n",
        "            data=txt,\n",
        "            file_name=\"healthcare_plan_report.txt\",\n",
        "            mime=\"text/plain\",\n",
        "        )\n",
        "    else:\n",
        "        st.info(\"No plan yet. Generate predictions first.\")\n",
        "\n",
        "with tab_dash:\n",
        "    st.subheader(\"Population Dashboard\")\n",
        "    st.caption(\"Upload a CSV of patients to visualize risks and metrics. Columns are auto-detected.\")\n",
        "    sample_cols = [\n",
        "        \"patient_id\",\"age\",\"sex\",\"height_cm\",\"weight_kg\",\"systolic_bp\",\"diastolic_bp\",\n",
        "        \"fasting_glucose\",\"hba1c\",\"total_chol\",\"hdl\",\"ldl\",\"smoker\",\"family_history\",\"activity_minutes_per_week\"\n",
        "    ]\n",
        "    uploaded = st.file_uploader(\"Upload CSV\", type=[\"csv\"])\n",
        "\n",
        "    if uploaded is not None:\n",
        "        df = pd.read_csv(uploaded)\n",
        "        # Ensure required columns exist; create if missing\n",
        "        for col in sample_cols:\n",
        "            if col not in df.columns:\n",
        "                df[col] = np.nan\n",
        "\n",
        "        # Compute BMI\n",
        "        df[\"bmi\"] = df.apply(lambda r: compute_bmi(r[\"height_cm\"], r[\"weight_kg\"]), axis=1)\n",
        "\n",
        "        # Coarse type fixes\n",
        "        for bcol in [\"smoker\", \"family_history\"]:\n",
        "            if bcol in df.columns:\n",
        "                df[bcol] = df[bcol].map(lambda x: 1 if str(x).strip().lower() in [\"1\",\"true\",\"yes\",\"y\"] else 0)\n",
        "\n",
        "        # Risk predictions per row\n",
        "        def row_risks(r):\n",
        "            feats = {\n",
        "                \"age\": r.get(\"age\", np.nan),\n",
        "                \"sex\": r.get(\"sex\", \"Other\"),\n",
        "                \"height_cm\": r.get(\"height_cm\", np.nan),\n",
        "                \"weight_kg\": r.get(\"weight_kg\", np.nan),\n",
        "                \"bmi\": r.get(\"bmi\", np.nan),\n",
        "                \"systolic_bp\": r.get(\"systolic_bp\", np.nan),\n",
        "                \"diastolic_bp\": r.get(\"diastolic_bp\", np.nan),\n",
        "                \"fasting_glucose\": r.get(\"fasting_glucose\", np.nan),\n",
        "                \"hba1c\": r.get(\"hba1c\", np.nan),\n",
        "                \"total_chol\": r.get(\"total_chol\", np.nan),\n",
        "                \"hdl\": r.get(\"hdl\", np.nan),\n",
        "                \"ldl\": r.get(\"ldl\", np.nan),\n",
        "                \"smoker\": bool(r.get(\"smoker\", 0)),\n",
        "                \"family_history\": bool(r.get(\"family_history\", 0)),\n",
        "                \"activity_minutes_per_week\": r.get(\"activity_minutes_per_week\", np.nan),\n",
        "            }\n",
        "            return risk_model(feats)\n",
        "\n",
        "        risks_list = df.apply(row_risks, axis=1)\n",
        "        df[\"diabetes_risk\"] = risks_list.map(lambda d: d[\"diabetes_risk\"])\n",
        "        df[\"heart_disease_risk\"] = risks_list.map(lambda d: d[\"heart_disease_risk\"])\n",
        "        df[\"hypertension_risk\"] = risks_list.map(lambda d: d[\"hypertension_risk\"])\n",
        "\n",
        "        # Banding\n",
        "        df[\"diabetes_band\"] = df[\"diabetes_risk\"].map(risk_band)\n",
        "        df[\"heart_band\"] = df[\"heart_disease_risk\"].map(risk_band)\n",
        "        df[\"hypertension_band\"] = df[\"hypertension_risk\"].map(risk_band)\n",
        "\n",
        "        st.markdown(\"### Overview\")\n",
        "        k1, k2, k3, k4 = st.columns(4)\n",
        "        k1.metric(\"Patients\", len(df))\n",
        "        k2.metric(\"Avg BMI\", f\"{df['bmi'].mean():.1f}\")\n",
        "        k3.metric(\"Avg Systolic BP\", f\"{df['systolic_bp'].mean():.0f}\")\n",
        "        k4.metric(\"Avg Fasting Glucose\", f\"{df['fasting_glucose'].mean():.0f}\")\n",
        "\n",
        "        st.markdown(\"### Risk Distribution\")\n",
        "        c1, c2 = st.columns(2)\n",
        "        with c1:\n",
        "            fig1 = px.histogram(df, x=\"diabetes_risk\", nbins=20, title=\"Diabetes Risk\")\n",
        "            st.plotly_chart(fig1, use_container_width=True)\n",
        "            fig2 = px.histogram(df, x=\"heart_disease_risk\", nbins=20, title=\"Heart Disease Risk\")\n",
        "            st.plotly_chart(fig2, use_container_width=True)\n",
        "        with c2:\n",
        "            fig3 = px.histogram(df, x=\"hypertension_risk\", nbins=20, title=\"Hypertension Risk\")\n",
        "            st.plotly_chart(fig3, use_container_width=True)\n",
        "            band_counts = df[[\"diabetes_band\",\"heart_band\",\"hypertension_band\"]].melt(var_name=\"type\", value_name=\"band\")\n",
        "            fig4 = px.bar(band_counts.value_counts().reset_index().rename(columns={\"count\":\"n\"}),\n",
        "                          x=\"type\", y=\"n\", color=\"band\", title=\"Risk Bands Count\")\n",
        "            st.plotly_chart(fig4, use_container_width=True)\n",
        "\n",
        "        st.markdown(\"### Relationships\")\n",
        "        r1, r2 = st.columns(2)\n",
        "        with r1:\n",
        "            fig5 = px.scatter(df, x=\"bmi\", y=\"fasting_glucose\", color=\"diabetes_band\", title=\"BMI vs Fasting Glucose\")\n",
        "            st.plotly_chart(fig5, use_container_width=True)\n",
        "        with r2:\n",
        "            fig6 = px.scatter(df, x=\"systolic_bp\", y=\"diastolic_bp\", color=\"hypertension_band\", title=\"BP Scatter\")\n",
        "            st.plotly_chart(fig6, use_container_width=True)\n",
        "\n",
        "        st.markdown(\"### Data Preview\")\n",
        "        st.dataframe(df.head(50), use_container_width=True)\n",
        "\n",
        "        # Download enriched dataset\n",
        "        out = io.StringIO()\n",
        "        df.to_csv(out, index=False)\n",
        "        st.download_button(\n",
        "            \"Download Enriched CSV\",\n",
        "            data=out.getvalue().encode(),\n",
        "            file_name=\"patients_enriched.csv\",\n",
        "            mime=\"text/csv\",\n",
        "        )\n",
        "    else:\n",
        "        st.info(\"Upload a CSV to see cohort dashboards.\")\n",
        "\n",
        "with tab_help:\n",
        "    st.subheader(\"How to Use\")\n",
        "    st.markdown(\n",
        "        \"\"\"\n",
        "1) **Enter patient details** in the sidebar → click **Predict Risks**\n",
        "2) See **Predictions** and **Care Plan**\n",
        "3) Upload a CSV in **Dashboards** to visualize a population\n",
        "\n",
        "**CSV Template Columns** (case-sensitive):\n",
        "- `patient_id` (str/int)\n",
        "- `age` (int), `sex` (Female/Male/Other)\n",
        "- `height_cm`, `weight_kg`\n",
        "- `systolic_bp`, `diastolic_bp`\n",
        "- `fasting_glucose`, `hba1c`\n",
        "- `total_chol`, `hdl`, `ldl`\n",
        "- `smoker` (1/0, yes/no/true/false)\n",
        "- `family_history` (1/0, yes/no/true/false)\n",
        "- `activity_minutes_per_week`\n",
        "\"\"\"\n",
        "    )\n",
        "\n",
        "    # Provide a downloadable sample CSV\n",
        "    sample = pd.DataFrame({\n",
        "        \"patient_id\": [f\"P{i:03d}\" for i in range(1, 31)],\n",
        "        \"age\": np.random.randint(25, 75, 30),\n",
        "        \"sex\": np.random.choice([\"Female\",\"Male\",\"Other\"], 30, p=[0.48,0.48,0.04]),\n",
        "        \"height_cm\": np.random.normal(168, 10, 30).round(0).clip(145, 195),\n",
        "        \"weight_kg\": np.random.normal(75, 15, 30).round(1).clip(45, 140),\n",
        "        \"systolic_bp\": np.random.normal(128, 16, 30).round(0).clip(90, 200),\n",
        "        \"diastolic_bp\": np.random.normal(82, 10, 30).round(0).clip(55, 120),\n",
        "        \"fasting_glucose\": np.random.normal(98, 15, 30).round(0).clip(65, 240),\n",
        "        \"hba1c\": np.random.normal(5.6, 0.7, 30).round(1).clip(4.5, 11.0),\n",
        "        \"total_chol\": np.random.normal(190, 35, 30).round(0).clip(110, 320),\n",
        "        \"hdl\": np.random.normal(52, 12, 30).round(0).clip(25, 90),\n",
        "        \"ldl\": np.random.normal(120, 30, 30).round(0).clip(60, 220),\n",
        "        \"smoker\": np.random.choice([0,1], 30, p=[0.75,0.25]),\n",
        "        \"family_history\": np.random.choice([0,1], 30, p=[0.7,0.3]),\n",
        "        \"activity_minutes_per_week\": np.random.normal(110, 70, 30).round(0).clip(0, 600),\n",
        "    })\n",
        "    sample[\"bmi\"] = sample.apply(lambda r: compute_bmi(r[\"height_cm\"], r[\"weight_kg\"]), axis=1)\n",
        "    csv_bytes = sample.to_csv(index=False).encode()\n",
        "    st.download_button(\n",
        "        \"Download Sample CSV\",\n",
        "        data=csv_bytes,\n",
        "        file_name=\"sample_patients.csv\",\n",
        "        mime=\"text/csv\",\n",
        "    )\n",
        "\n",
        "# Footer disclaimer\n",
        "st.write(\"---\")\n",
        "st.caption(\"© 2025 Demo. For education only. Not a medical device or diagnostic tool.\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# healthcare_app.py\n",
        "# ---------------------------------------------\n",
        "# Streamlit Healthcare Assistant\n",
        "# - Predicts risks for Diabetes, Heart Disease, Hypertension\n",
        "# - Generates a simple care plan\n",
        "# - Builds dashboards from uploaded CSV data\n",
        "#\n",
        "# DISCLAIMER: This tool is for educational use only and is NOT medical advice.\n",
        "# Always consult licensed clinicians for diagnosis and treatment.\n",
        "# ---------------------------------------------\n",
        "\n",
        "import io\n",
        "import json\n",
        "import base64\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import plotly.express as px\n",
        "import streamlit as st\n",
        "from datetime import datetime\n",
        "\n",
        "# ---------------------------\n",
        "# Utility & risk calculations\n",
        "# ---------------------------\n",
        "def sigmoid(x):\n",
        "    return 1 / (1 + np.exp(-x))\n",
        "\n",
        "def compute_bmi(height_cm: float, weight_kg: float) -> float:\n",
        "    if height_cm is None or weight_kg is None or height_cm <= 0:\n",
        "        return np.nan\n",
        "    return weight_kg / ((height_cm / 100) ** 2)\n",
        "\n",
        "def clip_num(x, lo, hi):\n",
        "    try:\n",
        "        return float(np.clip(float(x), lo, hi))\n",
        "    except Exception:\n",
        "        return np.nan\n",
        "\n",
        "def normalize(x, mean, std, lo=None, hi=None):\n",
        "    \"\"\"Z-score then clip to [-3, 3] for stability.\"\"\"\n",
        "    if x is None or pd.isna(x):\n",
        "        return 0.0\n",
        "    z = (float(x) - mean) / (std if std > 0 else 1.0)\n",
        "    z = float(np.clip(z, -3, 3))\n",
        "    if lo is not None and hi is not None:\n",
        "        return float(np.clip(z, lo, hi))\n",
        "    return z\n",
        "\n",
        "def risk_model(features: dict):\n",
        "    \"\"\"\n",
        "    Simple transparent rule-based scoring mapped through sigmoid to produce\n",
        "    pseudo-probabilities. This is NOT a medical model.\n",
        "    Inputs (features):\n",
        "      age, sex, height_cm, weight_kg, bmi, systolic_bp, diastolic_bp,\n",
        "      fasting_glucose, hba1c, total_chol, hdl, ldl,\n",
        "      smoker(bool), family_history(bool), activity_minutes_per_week\n",
        "    Returns dict of risks in [0,1].\n",
        "    \"\"\"\n",
        "\n",
        "    # Extract features with defaults\n",
        "    age = features.get(\"age\", 35)\n",
        "    bmi = features.get(\"bmi\", np.nan)\n",
        "    sys_bp = features.get(\"systolic_bp\", 120)\n",
        "    dia_bp = features.get(\"diastolic_bp\", 80)\n",
        "    fbg = features.get(\"fasting_glucose\", 95)\n",
        "    hba1c = features.get(\"hba1c\", 5.3)\n",
        "    chol = features.get(\"total_chol\", 180)\n",
        "    hdl = features.get(\"hdl\", 50)\n",
        "    ldl = features.get(\"ldl\", 110)\n",
        "    smoker = 1.0 if features.get(\"smoker\", False) else 0.0\n",
        "    fam = 1.0 if features.get(\"family_history\", False) else 0.0\n",
        "    act = features.get(\"activity_minutes_per_week\", 60)\n",
        "\n",
        "    # Normalizations (rough population-ish priors)\n",
        "    n_age = normalize(age, 45, 12)\n",
        "    n_bmi = normalize(bmi, 26, 5)\n",
        "    n_sys = normalize(sys_bp, 125, 15)\n",
        "    n_dia = normalize(dia_bp, 80, 10)\n",
        "    n_fbg = normalize(fbg, 95, 12)\n",
        "    n_a1c = normalize(hba1c, 5.4, 0.5)\n",
        "    n_chol = normalize(chol, 190, 35)\n",
        "    n_hdl = -normalize(hdl, 55, 12)  # higher HDL reduces risk\n",
        "    n_ldl = normalize(ldl, 120, 30)\n",
        "    n_act = -normalize(act, 120, 60)  # more activity reduces risk\n",
        "\n",
        "    # Diabetes risk score\n",
        "    # drivers: BMI, fasting glucose, HbA1c, age, activity, family history\n",
        "    d_score = (\n",
        "        0.9 * n_bmi\n",
        "        + 1.2 * n_fbg\n",
        "        + 1.2 * n_a1c\n",
        "        + 0.5 * n_age\n",
        "        + 0.5 * n_act\n",
        "        + 0.6 * fam\n",
        "        + 0.3 * smoker\n",
        "        - 0.2  # baseline\n",
        "    )\n",
        "    diabetes = float(sigmoid(d_score))\n",
        "\n",
        "    # Heart disease risk score\n",
        "    # drivers: age, total chol, LDL, HDL (protective), BP, smoking, family history, activity\n",
        "    h_score = (\n",
        "        0.8 * n_age\n",
        "        + 0.8 * n_chol\n",
        "        + 0.7 * n_ldl\n",
        "        + 0.6 * n_sys\n",
        "        + 0.3 * n_dia\n",
        "        + 0.8 * smoker\n",
        "        + 0.6 * fam\n",
        "        + 0.5 * n_bmi\n",
        "        + 0.5 * n_act\n",
        "        - 0.3\n",
        "        + 0.8 * n_hdl  # already negative\n",
        "    )\n",
        "    heart = float(sigmoid(h_score))\n",
        "\n",
        "    # Hypertension risk score\n",
        "    # drivers: systolic/diastolic BP, BMI, age, smoking, family history, activity\n",
        "    ht_score = (\n",
        "        1.2 * n_sys\n",
        "        + 0.8 * n_dia\n",
        "        + 0.6 * n_bmi\n",
        "        + 0.6 * n_age\n",
        "        + 0.4 * smoker\n",
        "        + 0.5 * fam\n",
        "        + 0.4 * n_act\n",
        "        - 0.2\n",
        "    )\n",
        "    htn = float(sigmoid(ht_score))\n",
        "\n",
        "    return {\n",
        "        \"diabetes_risk\": round(diabetes, 3),\n",
        "        \"heart_disease_risk\": round(heart, 3),\n",
        "        \"hypertension_risk\": round(htn, 3),\n",
        "    }\n",
        "\n",
        "def risk_band(p):\n",
        "    if p >= 0.67:\n",
        "        return \"High\"\n",
        "    if p >= 0.34:\n",
        "        return \"Moderate\"\n",
        "    return \"Low\"\n",
        "\n",
        "def make_care_plan(features, risks):\n",
        "    bmi = features.get(\"bmi\", np.nan)\n",
        "    act = features.get(\"activity_minutes_per_week\", 0)\n",
        "    sys_bp = features.get(\"systolic_bp\", 120)\n",
        "    fbg = features.get(\"fasting_glucose\", 95)\n",
        "    hba1c = features.get(\"hba1c\", 5.3)\n",
        "    smoker = features.get(\"smoker\", False)\n",
        "\n",
        "    # Key risk bands\n",
        "    d_band = risk_band(risks[\"diabetes_risk\"])\n",
        "    h_band = risk_band(risks[\"heart_disease_risk\"])\n",
        "    t_band = risk_band(risks[\"hypertension_risk\"])\n",
        "\n",
        "    plan = []\n",
        "    plan.append(\"⚠️ This autogenerated plan is not medical advice. Consult a clinician.\")\n",
        "\n",
        "    # General\n",
        "    if pd.notna(bmi):\n",
        "        if bmi >= 30:\n",
        "            plan.append(\"• Weight management: target 5–10% weight loss over 6–12 months.\")\n",
        "        elif bmi >= 25:\n",
        "            plan.append(\"• Aim to reach BMI < 25 with gradual lifestyle changes.\")\n",
        "        else:\n",
        "            plan.append(\"• Maintain current healthy weight with balanced nutrition.\")\n",
        "\n",
        "    if act < 150:\n",
        "        plan.append(\"• Physical activity: build to ≥150 min/week moderate activity (+ 2 strength days).\")\n",
        "    else:\n",
        "        plan.append(\"• Keep ≥150 min/week activity; add flexibility/strength work 2–3×/week.\")\n",
        "\n",
        "    if smoker:\n",
        "        plan.append(\"• Smoking: begin a cessation plan (set quit date, NRT or meds per clinician).\")\n",
        "\n",
        "    # Condition-specific\n",
        "    if d_band in [\"Moderate\", \"High\"] or fbg >= 100 or hba1c >= 5.7:\n",
        "        plan.append(\"• Glucose management: reduce refined carbs/sugary drinks; prefer high-fiber foods.\")\n",
        "        plan.append(\"• Monitor fasting glucose weekly; discuss HbA1c testing cadence (e.g., q3–6 months).\")\n",
        "\n",
        "    if t_band in [\"Moderate\", \"High\"] or sys_bp >= 130:\n",
        "        plan.append(\"• BP: limit sodium (~1.5–2 g/day), follow DASH-style diet, regular home BP logs.\")\n",
        "        plan.append(\"• Sleep hygiene: 7–9 h/night; screen for sleep apnea if snoring/daytime fatigue.\")\n",
        "\n",
        "    if h_band in [\"Moderate\", \"High\"]:\n",
        "        plan.append(\"• Lipids/heart: prioritize unsaturated fats, fish 2×/week, soluble fiber.\")\n",
        "        plan.append(\"• Add stress management: daily 10-min breathing/meditation; social support.\")\n",
        "\n",
        "    # Follow-up\n",
        "    plan.append(\"• Schedule preventive care visit; share home logs (BP/weight/glucose) with clinician.\")\n",
        "    return \"\\n\".join(plan)\n",
        "\n",
        "def to_download_button(data: bytes, filename: str, label: str):\n",
        "    b64 = base64.b64encode(data).decode()\n",
        "    href = f'<a href=\"data:file/txt;base64,{b64}\" download=\"{filename}\">{label}</a>'\n",
        "    return href\n",
        "\n",
        "# ---------------------------\n",
        "# Streamlit UI\n",
        "# ---------------------------\n",
        "st.set_page_config(page_title=\"Healthcare Assistant\", page_icon=\"🩺\", layout=\"wide\")\n",
        "\n",
        "st.title(\"🩺 Healthcare Assistant (Demo)\")\n",
        "st.caption(\"Educational tool — not for medical use.\")\n",
        "\n",
        "with st.sidebar:\n",
        "    st.header(\"Patient Intake\")\n",
        "    colA, colB = st.columns(2)\n",
        "    with colA:\n",
        "        age = st.number_input(\"Age\", min_value=0, max_value=120, value=35, step=1)\n",
        "        height_cm = st.number_input(\"Height (cm)\", min_value=80, max_value=250, value=170)\n",
        "        systolic_bp = st.number_input(\"Systolic BP\", min_value=70, max_value=250, value=122)\n",
        "        fasting_glucose = st.number_input(\"Fasting Glucose (mg/dL)\", min_value=50, max_value=400, value=95)\n",
        "        total_chol = st.number_input(\"Total Cholesterol (mg/dL)\", min_value=80, max_value=400, value=180)\n",
        "        hdl = st.number_input(\"HDL (mg/dL)\", min_value=10, max_value=120, value=50)\n",
        "    with colB:\n",
        "        sex = st.selectbox(\"Sex\", [\"Female\", \"Male\", \"Other\"])\n",
        "        weight_kg = st.number_input(\"Weight (kg)\", min_value=20.0, max_value=250.0, value=70.0, step=0.1)\n",
        "        diastolic_bp = st.number_input(\"Diastolic BP\", min_value=40, max_value=150, value=80)\n",
        "        hba1c = st.number_input(\"HbA1c (%)\", min_value=4.0, max_value=15.0, value=5.3, step=0.1)\n",
        "        ldl = st.number_input(\"LDL (mg/dL)\", min_value=30, max_value=300, value=110)\n",
        "        activity_minutes_per_week = st.number_input(\"Activity (min/week)\", min_value=0, max_value=2000, value=60, step=10)\n",
        "\n",
        "    smoker = st.checkbox(\"Currently smokes\")\n",
        "    family_history = st.checkbox(\"Family history of cardiometabolic disease\")\n",
        "\n",
        "    calc_bmi = compute_bmi(height_cm, weight_kg)\n",
        "    st.markdown(f\"**BMI:** {calc_bmi:.1f}\" if not pd.isna(calc_bmi) else \"**BMI:** —\")\n",
        "\n",
        "    if st.button(\"Predict Risks\"):\n",
        "        st.session_state[\"inputs\"] = {\n",
        "            \"age\": age,\n",
        "            \"sex\": sex,\n",
        "            \"height_cm\": height_cm,\n",
        "            \"weight_kg\": weight_kg,\n",
        "            \"bmi\": calc_bmi,\n",
        "            \"systolic_bp\": systolic_bp,\n",
        "            \"diastolic_bp\": diastolic_bp,\n",
        "            \"fasting_glucose\": fasting_glucose,\n",
        "            \"hba1c\": hba1c,\n",
        "            \"total_chol\": total_chol,\n",
        "            \"hdl\": hdl,\n",
        "            \"ldl\": ldl,\n",
        "            \"smoker\": smoker,\n",
        "            \"family_history\": family_history,\n",
        "            \"activity_minutes_per_week\": activity_minutes_per_week,\n",
        "        }\n",
        "        st.session_state[\"risks\"] = risk_model(st.session_state[\"inputs\"])\n",
        "        st.session_state[\"plan\"] = make_care_plan(st.session_state[\"inputs\"], st.session_state[\"risks\"])\n",
        "\n",
        "# Main layout\n",
        "tab_pred, tab_plan, tab_dash, tab_help = st.tabs(\n",
        "    [\"🧪 Predictions\", \"🗂 Care Plan\", \"📊 Dashboards\", \"ℹ️ Help & Template\"]\n",
        ")\n",
        "\n",
        "with tab_pred:\n",
        "    st.subheader(\"Predicted Risks\")\n",
        "    if \"risks\" in st.session_state:\n",
        "        risks = st.session_state[\"risks\"]\n",
        "        df_risk = pd.DataFrame(\n",
        "            {\n",
        "                \"Condition\": [\"Diabetes\", \"Heart Disease\", \"Hypertension\"],\n",
        "                \"Risk\": [risks[\"diabetes_risk\"], risks[\"heart_disease_risk\"], risks[\"hypertension_risk\"]],\n",
        "                \"Band\": [\n",
        "                    risk_band(risks[\"diabetes_risk\"]),\n",
        "                    risk_band(risks[\"heart_disease_risk\"]),\n",
        "                    risk_band(risks[\"hypertension_risk\"]),\n",
        "                ],\n",
        "            }\n",
        "        )\n",
        "        c1, c2 = st.columns([2, 1])\n",
        "        with c1:\n",
        "            fig = px.bar(\n",
        "                df_risk, x=\"Condition\", y=\"Risk\", color=\"Band\", range_y=[0, 1],\n",
        "                text=df_risk[\"Risk\"].map(lambda x: f\"{x:.2f}\")\n",
        "            )\n",
        "            fig.update_layout(yaxis_title=\"Risk (0–1)\", xaxis_title=\"\", uniformtext_minsize=10, uniformtext_mode=\"hide\")\n",
        "            st.plotly_chart(fig, use_container_width=True)\n",
        "        with c2:\n",
        "            st.dataframe(df_risk, use_container_width=True)\n",
        "        st.success(\"Predictions generated. See the Care Plan tab for suggestions.\")\n",
        "    else:\n",
        "        st.info(\"Use the sidebar to enter patient details and click **Predict Risks**.\")\n",
        "\n",
        "with tab_plan:\n",
        "    st.subheader(\"Autogenerated Care Plan (Demo)\")\n",
        "    if \"plan\" in st.session_state and \"inputs\" in st.session_state:\n",
        "        st.text(st.session_state[\"plan\"])\n",
        "\n",
        "        # Download plan with inputs and risks as a text file\n",
        "        report = {\n",
        "            \"timestamp\": datetime.utcnow().isoformat() + \"Z\",\n",
        "            \"inputs\": st.session_state[\"inputs\"],\n",
        "            \"risks\": st.session_state[\"risks\"],\n",
        "            \"plan\": st.session_state[\"plan\"],\n",
        "        }\n",
        "        txt = (\n",
        "            \"Healthcare Assistant Report (Demo)\\n\"\n",
        "            \"=================================\\n\\n\"\n",
        "            f\"Timestamp (UTC): {report['timestamp']}\\n\\n\"\n",
        "            \"Inputs:\\n\"\n",
        "            + json.dumps(report[\"inputs\"], indent=2)\n",
        "            + \"\\n\\nRisks:\\n\"\n",
        "            + json.dumps(report[\"risks\"], indent=2)\n",
        "            + \"\\n\\nPlan:\\n\"\n",
        "            + report[\"plan\"]\n",
        "            + \"\\n\"\n",
        "        ).encode()\n",
        "        st.download_button(\n",
        "            \"Download Plan & Report (.txt)\",\n",
        "            data=txt,\n",
        "            file_name=\"healthcare_plan_report.txt\",\n",
        "            mime=\"text/plain\",\n",
        "        )\n",
        "    else:\n",
        "        st.info(\"No plan yet. Generate predictions first.\")\n",
        "\n",
        "with tab_dash:\n",
        "    st.subheader(\"Population Dashboard\")\n",
        "    st.caption(\"Upload a CSV of patients to visualize risks and metrics. Columns are auto-detected.\")\n",
        "    sample_cols = [\n",
        "        \"patient_id\",\"age\",\"sex\",\"height_cm\",\"weight_kg\",\"systolic_bp\",\"diastolic_bp\",\n",
        "        \"fasting_glucose\",\"hba1c\",\"total_chol\",\"hdl\",\"ldl\",\"smoker\",\"family_history\",\"activity_minutes_per_week\"\n",
        "    ]\n",
        "    uploaded = st.file_uploader(\"Upload CSV\", type=[\"csv\"])\n",
        "\n",
        "    if uploaded is not None:\n",
        "        df = pd.read_csv(uploaded)\n",
        "        # Ensure required columns exist; create if missing\n",
        "        for col in sample_cols:\n",
        "            if col not in df.columns:\n",
        "                df[col] = np.nan\n",
        "\n",
        "        # Compute BMI\n",
        "        df[\"bmi\"] = df.apply(lambda r: compute_bmi(r[\"height_cm\"], r[\"weight_kg\"]), axis=1)\n",
        "\n",
        "        # Coarse type fixes\n",
        "        for bcol in [\"smoker\", \"family_history\"]:\n",
        "            if bcol in df.columns:\n",
        "                df[bcol] = df[bcol].map(lambda x: 1 if str(x).strip().lower() in [\"1\",\"true\",\"yes\",\"y\"] else 0)\n",
        "\n",
        "        # Risk predictions per row\n",
        "        def row_risks(r):\n",
        "            feats = {\n",
        "                \"age\": r.get(\"age\", np.nan),\n",
        "                \"sex\": r.get(\"sex\", \"Other\"),\n",
        "                \"height_cm\": r.get(\"height_cm\", np.nan),\n",
        "                \"weight_kg\": r.get(\"weight_kg\", np.nan),\n",
        "                \"bmi\": r.get(\"bmi\", np.nan),\n",
        "                \"systolic_bp\": r.get(\"systolic_bp\", np.nan),\n",
        "                \"diastolic_bp\": r.get(\"diastolic_bp\", np.nan),\n",
        "                \"fasting_glucose\": r.get(\"fasting_glucose\", np.nan),\n",
        "                \"hba1c\": r.get(\"hba1c\", np.nan),\n",
        "                \"total_chol\": r.get(\"total_chol\", np.nan),\n",
        "                \"hdl\": r.get(\"hdl\", np.nan),\n",
        "                \"ldl\": r.get(\"ldl\", np.nan),\n",
        "                \"smoker\": bool(r.get(\"smoker\", 0)),\n",
        "                \"family_history\": bool(r.get(\"family_history\", 0)),\n",
        "                \"activity_minutes_per_week\": r.get(\"activity_minutes_per_week\", np.nan),\n",
        "            }\n",
        "            return risk_model(feats)\n",
        "\n",
        "        risks_list = df.apply(row_risks, axis=1)\n",
        "        df[\"diabetes_risk\"] = risks_list.map(lambda d: d[\"diabetes_risk\"])\n",
        "        df[\"heart_disease_risk\"] = risks_list.map(lambda d: d[\"heart_disease_risk\"])\n",
        "        df[\"hypertension_risk\"] = risks_list.map(lambda d: d[\"hypertension_risk\"])\n",
        "\n",
        "        # Banding\n",
        "        df[\"diabetes_band\"] = df[\"diabetes_risk\"].map(risk_band)\n",
        "        df[\"heart_band\"] = df[\"heart_disease_risk\"].map(risk_band)\n",
        "        df[\"hypertension_band\"] = df[\"hypertension_risk\"].map(risk_band)\n",
        "\n",
        "        st.markdown(\"### Overview\")\n",
        "        k1, k2, k3, k4 = st.columns(4)\n",
        "        k1.metric(\"Patients\", len(df))\n",
        "        k2.metric(\"Avg BMI\", f\"{df['bmi'].mean():.1f}\")\n",
        "        k3.metric(\"Avg Systolic BP\", f\"{df['systolic_bp'].mean():.0f}\")\n",
        "        k4.metric(\"Avg Fasting Glucose\", f\"{df['fasting_glucose'].mean():.0f}\")\n",
        "\n",
        "        st.markdown(\"### Risk Distribution\")\n",
        "        c1, c2 = st.columns(2)\n",
        "        with c1:\n",
        "            fig1 = px.histogram(df, x=\"diabetes_risk\", nbins=20, title=\"Diabetes Risk\")\n",
        "            st.plotly_chart(fig1, use_container_width=True)\n",
        "            fig2 = px.histogram(df, x=\"heart_disease_risk\", nbins=20, title=\"Heart Disease Risk\")\n",
        "            st.plotly_chart(fig2, use_container_width=True)\n",
        "        with c2:\n",
        "            fig3 = px.histogram(df, x=\"hypertension_risk\", nbins=20, title=\"Hypertension Risk\")\n",
        "            st.plotly_chart(fig3, use_container_width=True)\n",
        "            band_counts = df[[\"diabetes_band\",\"heart_band\",\"hypertension_band\"]].melt(var_name=\"type\", value_name=\"band\")\n",
        "            fig4 = px.bar(band_counts.value_counts().reset_index().rename(columns={\"count\":\"n\"}),\n",
        "                          x=\"type\", y=\"n\", color=\"band\", title=\"Risk Bands Count\")\n",
        "            st.plotly_chart(fig4, use_container_width=True)\n",
        "\n",
        "        st.markdown(\"### Relationships\")\n",
        "        r1, r2 = st.columns(2)\n",
        "        with r1:\n",
        "            fig5 = px.scatter(df, x=\"bmi\", y=\"fasting_glucose\", color=\"diabetes_band\", title=\"BMI vs Fasting Glucose\")\n",
        "            st.plotly_chart(fig5, use_container_width=True)\n",
        "        with r2:\n",
        "            fig6 = px.scatter(df, x=\"systolic_bp\", y=\"diastolic_bp\", color=\"hypertension_band\", title=\"BP Scatter\")\n",
        "            st.plotly_chart(fig6, use_container_width=True)\n",
        "\n",
        "        st.markdown(\"### Data Preview\")\n",
        "        st.dataframe(df.head(50), use_container_width=True)\n",
        "\n",
        "        # Download enriched dataset\n",
        "        out = io.StringIO()\n",
        "        df.to_csv(out, index=False)\n",
        "        st.download_button(\n",
        "            \"Download Enriched CSV\",\n",
        "            data=out.getvalue().encode(),\n",
        "            file_name=\"patients_enriched.csv\",\n",
        "            mime=\"text/csv\",\n",
        "        )\n",
        "    else:\n",
        "        st.info(\"Upload a CSV to see cohort dashboards.\")\n",
        "\n",
        "with tab_help:\n",
        "    st.subheader(\"How to Use\")\n",
        "    st.markdown(\n",
        "        \"\"\"\n",
        "1) **Enter patient details** in the sidebar → click **Predict Risks**\n",
        "2) See **Predictions** and **Care Plan**\n",
        "3) Upload a CSV in **Dashboards** to visualize a population\n",
        "\n",
        "**CSV Template Columns** (case-sensitive):\n",
        "- `patient_id` (str/int)\n",
        "- `age` (int), `sex` (Female/Male/Other)\n",
        "- `height_cm`, `weight_kg`\n",
        "- `systolic_bp`, `diastolic_bp`\n",
        "- `fasting_glucose`, `hba1c`\n",
        "- `total_chol`, `hdl`, `ldl`\n",
        "- `smoker` (1/0, yes/no/true/false)\n",
        "- `family_history` (1/0, yes/no/true/false)\n",
        "- `activity_minutes_per_week`\n",
        "\"\"\"\n",
        "    )\n",
        "\n",
        "    # Provide a downloadable sample CSV\n",
        "    sample = pd.DataFrame({\n",
        "        \"patient_id\": [f\"P{i:03d}\" for i in range(1, 31)],\n",
        "        \"age\": np.random.randint(25, 75, 30),\n",
        "        \"sex\": np.random.choice([\"Female\",\"Male\",\"Other\"], 30, p=[0.48,0.48,0.04]),\n",
        "        \"height_cm\": np.random.normal(168, 10, 30).round(0).clip(145, 195),\n",
        "        \"weight_kg\": np.random.normal(75, 15, 30).round(1).clip(45, 140),\n",
        "        \"systolic_bp\": np.random.normal(128, 16, 30).round(0).clip(90, 200),\n",
        "        \"diastolic_bp\": np.random.normal(82, 10, 30).round(0).clip(55, 120),\n",
        "        \"fasting_glucose\": np.random.normal(98, 15, 30).round(0).clip(65, 240),\n",
        "        \"hba1c\": np.random.normal(5.6, 0.7, 30).round(1).clip(4.5, 11.0),\n",
        "        \"total_chol\": np.random.normal(190, 35, 30).round(0).clip(110, 320),\n",
        "        \"hdl\": np.random.normal(52, 12, 30).round(0).clip(25, 90),\n",
        "        \"ldl\": np.random.normal(120, 30, 30).round(0).clip(60, 220),\n",
        "        \"smoker\": np.random.choice([0,1], 30, p=[0.75,0.25]),\n",
        "        \"family_history\": np.random.choice([0,1], 30, p=[0.7,0.3]),\n",
        "        \"activity_minutes_per_week\": np.random.normal(110, 70, 30).round(0).clip(0, 600),\n",
        "    })\n",
        "    sample[\"bmi\"] = sample.apply(lambda r: compute_bmi(r[\"height_cm\"], r[\"weight_kg\"]), axis=1)\n",
        "    csv_bytes = sample.to_csv(index=False).encode()\n",
        "    st.download_button(\n",
        "        \"Download Sample CSV\",\n",
        "        data=csv_bytes,\n",
        "        file_name=\"sample_patients.csv\",\n",
        "        mime=\"text/csv\",\n",
        "    )\n",
        "\n",
        "# Footer disclaimer\n",
        "st.write(\"---\")\n",
        "st.caption(\"© 2025 Demo. For education only. Not a medical device or diagnostic tool.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W8AN2IoOSBLf",
        "outputId": "40723ff6-93aa-41af-d576-99f41fa6a3ee"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "2025-09-04 05:52:02.181 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.182 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.331 \n",
            "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
            "  command:\n",
            "\n",
            "    streamlit run /usr/local/lib/python3.12/dist-packages/colab_kernel_launcher.py [ARGUMENTS]\n",
            "2025-09-04 05:52:02.332 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.333 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.334 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.335 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.336 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.338 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.339 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.340 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.342 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.343 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.345 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.345 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.346 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.347 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.348 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.349 Session state does not function when running a script without `streamlit run`\n",
            "2025-09-04 05:52:02.351 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.353 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.354 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.356 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.356 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.357 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.358 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.361 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.362 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.363 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.365 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.366 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.367 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.370 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.371 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.372 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.373 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.373 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.375 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.376 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.377 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.379 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.380 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.380 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.381 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.383 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.383 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.384 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.385 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.386 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.387 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.390 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.391 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.391 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.392 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.393 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.394 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.394 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.396 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.397 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.398 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.398 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.399 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.400 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.401 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.402 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.403 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.404 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.405 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.407 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.408 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.409 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.409 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.410 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.412 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.412 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.413 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.414 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.416 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.416 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.417 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.418 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.421 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.422 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.422 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.423 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.424 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.424 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.425 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.427 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.428 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.429 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.430 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.432 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.433 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.434 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.435 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.437 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.438 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.439 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.439 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.440 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.441 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.442 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.442 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.443 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.444 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.446 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.447 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.447 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.448 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.451 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.452 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.452 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.453 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.454 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.455 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.455 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.456 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.456 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.457 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.458 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.459 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.459 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.460 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.461 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.462 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.463 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.463 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.464 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.465 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.466 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.467 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.468 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.468 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.469 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.470 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.470 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.471 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.472 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.474 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.475 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.476 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.477 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.477 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.478 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.479 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.479 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.480 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.481 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.484 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.484 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.485 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.486 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.486 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.488 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.489 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.489 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.490 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.491 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.492 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.537 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.538 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.539 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.539 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.540 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.541 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.542 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.543 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.544 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.544 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.545 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.546 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 05:52:02.547 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DeltaGenerator()"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import streamlit as st\n",
        "\n",
        "st.title(\"Health Care Al Assistance\")\n",
        "\n",
        "st.text_input(\"Enter your health-related question: \")\n",
        "\n",
        "st.sidebar.header(\"Patient Profile\")\n",
        "\n",
        "st.sidebar.text_input(\"Name\")\n",
        "\n",
        "st.sidebar.number_input(\"Age\",0,100)\n",
        "\n",
        "st.sidebar.selectbox(\"Gender\", [\"Male\", \"Female\", \"Other\"])\n",
        "\n",
        "st.sidebar.text_area(\"Medical History\")\n",
        "\n",
        "st.sidebar.text_area(\"Current Medications\")\n",
        "\n",
        "st.sidebar.text_input(\"Allergies\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 990
        },
        "id": "VlRiOnuxVNpH",
        "outputId": "f3a16c68-cd53-4db2-b1c0-0854e83498d8"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "2025-09-04 06:05:58.815 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.817 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.818 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.819 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.820 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.821 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.822 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.823 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.824 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.825 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.826 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.827 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.828 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.829 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.829 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.830 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.831 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.832 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.833 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.833 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.834 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.835 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.836 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.836 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.837 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.838 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.839 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.840 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.840 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.841 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.842 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.843 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.844 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.845 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.846 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.847 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.847 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.848 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.849 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.849 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.850 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.851 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.852 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.852 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.853 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.854 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.854 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.855 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.856 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.856 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.857 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.858 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.859 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.860 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-04 06:05:58.860 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "''"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import gradio as gr\n",
        "import torch\n",
        "from transformers import AutoTokenizer, AutoModelForCausalLM\n",
        "\n",
        "# Load model and tokenizer\n",
        "model_name = \"ibm-granite/granite-3.2-2b-instruct\"\n",
        "tokenizer = AutoTokenizer.from_pretrained(model_name)\n",
        "model = AutoModelForCausalLM.from_pretrained(\n",
        "    model_name,\n",
        "    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,\n",
        "    device_map=\"auto\" if torch.cuda.is_available() else None\n",
        ")\n",
        "\n",
        "if tokenizer.pad_token is None:\n",
        "    tokenizer.pad_token = tokenizer.eos_token\n",
        "\n",
        "def generate_response(prompt, max_length=1024):\n",
        "    inputs = tokenizer(prompt, return_tensors=\"pt\", truncation=True, max_length=512)\n",
        "\n",
        "    if torch.cuda.is_available():\n",
        "        inputs = {k: v.to(model.device) for k, v in inputs.items()}\n",
        "\n",
        "    with torch.no_grad():\n",
        "        outputs = model.generate(\n",
        "            **inputs,\n",
        "            max_length=max_length,\n",
        "            temperature=0.7,\n",
        "            do_sample=True,\n",
        "            pad_token_id=tokenizer.eos_token_id\n",
        "        )\n",
        "\n",
        "    response = tokenizer.decode(outputs[0], skip_special_tokens=True)\n",
        "    response = response.replace(prompt, \"\").strip()\n",
        "    return response\n",
        "\n",
        "def disease_prediction(symptoms):\n",
        "    prompt = f\"Based on the following symptoms, provide possible medical conditions and general medication suggestions. Always emphasize the importance of consulting a doctor for proper diagnosis.\\n\\nSymptoms: {symptoms}\\n\\nPossible conditions and recommendations:\\n\\n**IMPORTANT: This is for informational purposes only. Please consult a healthcare professional for proper diagnosis and treatment.**\\n\\nAnalysis:\"\n",
        "    return generate_response(prompt, max_length=1200)\n",
        "\n",
        "def treatment_plan(condition, age, gender, medical_history):\n",
        "    prompt = f\"Generate personalized treatment suggestions for the following patient information. Include home remedies and general medication guidelines.\\n\\nMedical Condition: {condition}\\nAge: {age}\\nGender: {gender}\\nMedical History: {medical_history}\\n\\nPersonalized treatment plan including home remedies and medication guidelines:\\n\\n**IMPORTANT: This is for informational purposes only. Please consult a healthcare professional for proper treatment.**\\n\\nTreatment Plan:\"\n",
        "    return generate_response(prompt, max_length=1200)\n",
        "\n",
        "# Create Gradio interface\n",
        "with gr.Blocks() as app:\n",
        "    gr.Markdown(\"# Medical AI Assistant\")\n",
        "    gr.Markdown(\"**Disclaimer: This is for informational purposes only. Always consult healthcare professionals for medical advice.**\")\n",
        "\n",
        "    with gr.Tabs():\n",
        "        with gr.TabItem(\"Disease Prediction\"):\n",
        "            with gr.Row():\n",
        "                with gr.Column():\n",
        "                    symptoms_input = gr.Textbox(\n",
        "                        label=\"Enter Symptoms\",\n",
        "                        placeholder=\"e.g., fever, headache, cough, fatigue...\",\n",
        "                        lines=4\n",
        "                    )\n",
        "                    predict_btn = gr.Button(\"Analyze Symptoms\")\n",
        "\n",
        "                with gr.Column():\n",
        "                    prediction_output = gr.Textbox(label=\"Possible Conditions & Recommendations\", lines=20)\n",
        "\n",
        "            predict_btn.click(disease_prediction, inputs=symptoms_input, outputs=prediction_output)\n",
        "\n",
        "        with gr.TabItem(\"Treatment Plans\"):\n",
        "            with gr.Row():\n",
        "                with gr.Column():\n",
        "                    condition_input = gr.Textbox(\n",
        "                        label=\"Medical Condition\",\n",
        "                        placeholder=\"e.g., diabetes, hypertension, migraine...\",\n",
        "                        lines=2\n",
        "                    )\n",
        "                    age_input = gr.Number(label=\"Age\", value=30)\n",
        "                    gender_input = gr.Dropdown(\n",
        "                        choices=[\"Male\", \"Female\", \"Other\"],\n",
        "                        label=\"Gender\",\n",
        "                        value=\"Male\"\n",
        "                    )\n",
        "                    history_input = gr.Textbox(\n",
        "                        label=\"Medical History\",\n",
        "                        placeholder=\"Previous conditions, allergies, medications or None\",\n",
        "                        lines=3\n",
        "                    )\n",
        "                    plan_btn = gr.Button(\"Generate Treatment Plan\")\n",
        "\n",
        "                with gr.Column():\n",
        "                    plan_output = gr.Textbox(label=\"Personalized Treatment Plan\", lines=20)\n",
        "\n",
        "            plan_btn.click(treatment_plan, inputs=[condition_input, age_input, gender_input, history_input], outputs=plan_output)\n",
        "\n",
        "app.launch(share=True)\n",
        "\n",
        "healthai.py\n",
        "\n",
        "Displaying healthai.py."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 106
        },
        "id": "bFzuQg2kXhpd",
        "outputId": "e40b3154-4914-49da-ab56-e9ab9e87b6b6"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "invalid syntax (ipython-input-1890212736.py, line 95)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"/tmp/ipython-input-1890212736.py\"\u001b[0;36m, line \u001b[0;32m95\u001b[0m\n\u001b[0;31m    Displaying healthai.py.\u001b[0m\n\u001b[0m               ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# healthai.py\n",
        "\n",
        "import gradio as gr\n",
        "import torch\n",
        "from transformers import AutoTokenizer, AutoModelForCausalLM\n",
        "\n",
        "# ------------------------------\n",
        "# Load model and tokenizer\n",
        "# ------------------------------\n",
        "model_name = \"ibm-granite/granite-3.2-2b-instruct\"\n",
        "\n",
        "tokenizer = AutoTokenizer.from_pretrained(model_name)\n",
        "model = AutoModelForCausalLM.from_pretrained(\n",
        "    model_name,\n",
        "    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,\n",
        "    device_map=\"auto\" if torch.cuda.is_available() else None\n",
        ")\n",
        "\n",
        "# Ensure pad token is set\n",
        "if tokenizer.pad_token is None:\n",
        "    tokenizer.pad_token = tokenizer.eos_token\n",
        "\n",
        "# ------------------------------\n",
        "# Inference Functions\n",
        "# ------------------------------\n",
        "def generate_response(prompt, max_length=1024):\n",
        "    inputs = tokenizer(prompt, return_tensors=\"pt\", truncation=True, max_length=512)\n",
        "\n",
        "    # Move tensors to model's device if on CUDA\n",
        "    if torch.cuda.is_available():\n",
        "        inputs = {k: v.to(model.device) for k, v in inputs.items()}\n",
        "\n",
        "    with torch.no_grad():\n",
        "        outputs = model.generate(\n",
        "            **inputs,\n",
        "            max_length=max_length,\n",
        "            temperature=0.7,\n",
        "            do_sample=True,\n",
        "            pad_token_id=tokenizer.eos_token_id\n",
        "        )\n",
        "\n",
        "    # Clean and return response\n",
        "    response = tokenizer.decode(outputs[0], skip_special_tokens=True)\n",
        "    return response.replace(prompt, \"\").strip()\n",
        "\n",
        "def disease_prediction(symptoms):\n",
        "    prompt = (\n",
        "        \"Based on the following symptoms, provide possible medical conditions and general medication suggestions. \"\n",
        "        \"Always emphasize the importance of consulting a doctor for proper diagnosis.\\n\\n\"\n",
        "        f\"Symptoms: {symptoms}\\n\\n\"\n",
        "        \"**IMPORTANT: This is for informational purposes only. Please consult a healthcare professional for proper diagnosis and treatment.**\\n\\n\"\n",
        "        \"Analysis:\"\n",
        "    )\n",
        "    return generate_response(prompt, max_length=1200)\n",
        "\n",
        "def treatment_plan(condition, age, gender, medical_history):\n",
        "    prompt = (\n",
        "        \"Generate personalized treatment suggestions for the following patient information. Include home remedies and general medication guidelines.\\n\\n\"\n",
        "        f\"Medical Condition: {condition}\\nAge: {age}\\nGender: {gender}\\nMedical History: {medical_history}\\n\\n\"\n",
        "        \"**IMPORTANT: This is for informational purposes only. Please consult a healthcare professional for proper treatment.**\\n\\n\"\n",
        "        \"Treatment Plan:\"\n",
        "    )\n",
        "    return generate_response(prompt, max_length=1200)\n",
        "\n",
        "# ------------------------------\n",
        "# Gradio Interface\n",
        "# ------------------------------\n",
        "with gr.Blocks() as app:\n",
        "    gr.Markdown(\"# 🏥 Medical AI Assistant\")\n",
        "    gr.Markdown(\"**Disclaimer:** This is for informational purposes only. Always consult healthcare professionals for medical advice.\")\n",
        "\n",
        "    with gr.Tabs():\n",
        "        # Disease Prediction Tab\n",
        "        with gr.TabItem(\"🧪 Disease Prediction\"):\n",
        "            with gr.Row():\n",
        "                with gr.Column():\n",
        "                    symptoms_input = gr.Textbox(\n",
        "                        label=\"Enter Symptoms\",\n",
        "                        placeholder=\"e.g., fever, headache, cough, fatigue...\",\n",
        "                        lines=4\n",
        "                    )\n",
        "                    predict_btn = gr.Button(\"Analyze Symptoms\")\n",
        "\n",
        "                with gr.Column():\n",
        "                    prediction_output = gr.Textbox(\n",
        "                        label=\"Possible Conditions & Recommendations\",\n",
        "                        lines=20,\n",
        "                        interactive=False\n",
        "                    )\n",
        "\n",
        "            predict_btn.click(fn=disease_prediction, inputs=symptoms_input, outputs=prediction_output)\n",
        "\n",
        "        # Treatment Plan Tab\n",
        "        with gr.TabItem(\"💊 Treatment Plan\"):\n",
        "            with gr.Row():\n",
        "                with gr.Column():\n",
        "                    condition_input = gr.Textbox(\n",
        "                        label=\"Medical Condition\",\n",
        "                        placeholder=\"e.g., diabetes, hypertension, migraine...\",\n",
        "                        lines=2\n",
        "                    )\n",
        "                    age_input = gr.Number(label=\"Age\", value=30)\n",
        "                    gender_input = gr.Dropdown(\n",
        "                        choices=[\"Male\", \"Female\", \"Other\"],\n",
        "                        label=\"Gender\",\n",
        "                        value=\"Male\"\n",
        "                    )\n",
        "                    history_input = gr.Textbox(\n",
        "                        label=\"Medical History\",\n",
        "                        placeholder=\"Previous conditions, allergies, medications, or None\",\n",
        "                        lines=3\n",
        "                    )\n",
        "                    plan_btn = gr.Button(\"Generate Treatment Plan\")\n",
        "\n",
        "                with gr.Column():\n",
        "                    plan_output = gr.Textbox(\n",
        "                        label=\"Personalized Treatment Plan\",\n",
        "                        lines=20,\n",
        "                        interactive=False\n",
        "                    )\n",
        "\n",
        "            plan_btn.click(\n",
        "                fn=treatment_plan,\n",
        "                inputs=[condition_input, age_input, gender_input, history_input],\n",
        "                outputs=plan_output\n",
        "            )\n",
        "\n",
        "# ------------------------------\n",
        "# Launch App\n",
        "# ------------------------------\n",
        "app.launch(share=True)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000,
          "referenced_widgets": [
            "baf90868de9847a391bfd4f89fd794fe",
            "a198d5b6a7704f77bd2c849661729ecf",
            "779f8129cc6a497e9c10553d99d8bd0c",
            "9bb0f3031c314d26b1b564f60d7661ff",
            "d49ff325ba6e4291b5fa364e94c92ae3",
            "d31774a03d404fc5beabb13960c163bf",
            "88042c44fe8b4ec7b832fb59dec5ab9c",
            "eeedd364674e43698633149e74fe199b",
            "21e7d4b01b304b6faee1c1571fb524ac",
            "8a7add7d5a2042799545a9fd5081aa35",
            "902c8fab56324235b5e789ba748b567c",
            "18b3054de4ad4391a611f490be56abba",
            "901ea3f079d1464d8c4a1fefb49a5429",
            "165b162d29cd4e88a418b5b9f797fb1d",
            "bf07a979e3da43eca159d3531940029e",
            "02a9e32e6b0f4ab19e0b9b84a647983e",
            "1017726a2b214ef0aabc6f73d7724092",
            "acc30c33a4f9450aba6931ee3eb74c9b",
            "416236064dd14260abd36b0c8ba20275",
            "73d5a2910e4942fb9461438752d47800",
            "b40638f76ffb4642ac30df1ad840888d",
            "55115cc0eba34cd7912d884130ff16d1",
            "19a362b1af5b4c55a2e638cb20bcd289",
            "ed7b80e2b48a4439b01abf55939ea80a",
            "c1105b26b9984bb3b4345a31fbef5188",
            "c09e9e3de3cd4b87817e5e35ab909067",
            "5b860cfe62624005a07aa5d13ad84ab8",
            "ed7ae8925de941b4a5a87c776bde4d1c",
            "0ce57272b78f431db0b49f686f8e85be",
            "cb1bc974385d48e486c8b86dc1d4181c",
            "3e4eafd0e2e641b0b0b49716fe2dbf2d",
            "07621c9211dc4bfba3c717762028a9c8",
            "376e13abaf18417696a81cc02626a3e6",
            "c1c7fc8bd65642afb84959f378cde9c0",
            "800abec842c34cccb573238472c4ef20",
            "7d631adc49bc45d28280d12ab86346c2",
            "284e4bf313da45e0a61d33737489cf1e",
            "3ee57a88be054c858165dd7e9a33da96",
            "5fff7d04d4154df49aada94636134bc3",
            "61aefd6d69fe4cb8b3dcd3d5783e57ca",
            "c4a349ec0f5542bab2ec6ff96d8d8ed0",
            "8f5a9c784caf4fd789561f5bb7bb9d7f",
            "7b7592cee23741ec80bf0c29c06436e3",
            "f78a152d65574614b0d1b99236a08923",
            "0cff3bd15cfc4be4ab3f61ce467fd563",
            "e939391a011d4291bdad68e34642b357",
            "5de82881732f43679420ad028dd33137",
            "2b3964c8cf5b47cbad431ceb44f710cc",
            "985f5c1841a74450b5f257eed1100ce0",
            "8bed1304e0664f5a8751407e7431bc86",
            "8a35cba4024d40f5b199ffea20811c3b",
            "7701e559d01d4d508b67815a2f29de52",
            "fe802d9f3956412d88a45b85d87b54e0",
            "f86429504e18463194fdbeb5bce8f307",
            "2c8fbe69ad1e41d684d79f8c9b102fe6",
            "b300a3878ca740d3b625150d8c3212a6",
            "797195a48d494595a97a3d18f2d4fc42",
            "3a6706c798004d70b080ebcdaf021c00",
            "e68b5ac30ce84bccabc9f5ba13c0bbd0",
            "db81162a89964b39a02f88566814d12c",
            "e0be4fe9d7c44092ac922f83154f6355",
            "60fadfbb601c44f5b947250f18416667",
            "17426222db8e4ce58ba5646da9a0c8bf",
            "79ce9a61f5d54a6eb273f650833ff88c",
            "9a625f98f891415fb1e6bd68f068b702",
            "c627d21a51644edab32739a48ab55ea4",
            "6c087cc1e50f46b09ea938f54a7d75e7",
            "1c499581e3ac438496d82a3ff6f5545e",
            "02394c13ca9c4ed695d562f73a0e13d7",
            "dd28ce99000445758977308ca61fac63",
            "0b80626795ea4d3dbdf7792102080960",
            "ae31a2ea9b844dc4a110e8cb19dad7dc",
            "5cfac1a9b42f4a4782f4d6ef1ad065d0",
            "9c9f8b0332a246a2b87f9f3cf98fd49d",
            "dd46e97fb6e74271a0391d7d5cc3e17b",
            "e9fbd6034e5d4e668f95e5954b140fcf",
            "5cf59a956ad043d5a87c08e8a625c5ba",
            "86bbb3cea2d9420e97750419564c2f1a",
            "e5414ab2a605455cb75b2b3a953cb630",
            "f563ff127df34680ae5943907c571ab8",
            "5fbc7736c3c94a9e86ac22f389ee53c7",
            "040e263b97fa477c989e35a66f2145f3",
            "ff344277d4154c12a44093952554fd51",
            "b800b924db2f438081481b782863ba3e",
            "997b33eb76554c55a439fb6b638166ad",
            "d54c0868d5f14404be055d635b3dbf3b",
            "ce4afb05f834481b9b99ab5959bdd105",
            "2b63a207b632458a8b35f27bea24a431",
            "0b0948412bb9411d82ab3c18c4f88ec6",
            "3fe589b80acd4352a05c8537c346022a",
            "07c124ac83224ecb8c063db8ebf191d8",
            "84b09da6204f4ff4b75f0aa192ec19dc",
            "988a7578d37d4ef8986fcf44a48503e4",
            "8cb42f4477b4437b8f4143dafa757688",
            "72bf50439a09482cbb8ad2fb85da8b02",
            "a52c19fce10f459fb83e7f24407c85cd",
            "d6c30574645c47adb500a0c6f07a34f5",
            "858bfe87c7d743e999d1dd6e86467a5c",
            "6b8f20b2736443bd8604cf4e26345658",
            "b5bcf10d8e1c4e1b9a6aeb746fdd8534",
            "99d445c55725450e9d1125a83f392c85",
            "420e27bfdc4340e4a8b56d619bac6c26",
            "6b66eab90a504a92a68a9a0453475b18",
            "de258144aca140feb79f01fa8fdc1910",
            "01d7d64c65cd4f40833cc9a7c54d470a",
            "8b49a0a519084b57885404349735dbc3",
            "77401143cc264e918936d75cb28f3bb4",
            "583afdf0d6b145d988547bf4ed385f3c",
            "0996ebe550be43c3b4ac8a40acbae749",
            "7fba821697a548f39550621c8f01704a",
            "35b1965e81ef483eb1910c8e23db7268",
            "2c140bf3f51344aaa0cfde96e4d76d1b",
            "cd8c1878d1b54cee9e3bc3ec8b13b8a0",
            "91d1c149294f45f5829a080a45130145",
            "17065afb47f94899878d129fd063f5d4",
            "b86d2ceb943940538062f7c89f452c1c",
            "1f705afc4f0a4ce88c794ad88fa8909e",
            "07ec674eda1a45c0ba68bbab5d8fac48",
            "98430a82ed2d4637b6d53465a5bbc1b5",
            "d086c19ce34e4ef59bc05d3e00f91d1e",
            "1d9cb1769d0b43c0a7f57bc92f1b198f",
            "33771aa5bb8a47208035349426bb98d2",
            "8cd98e60eaca4931a2d112fa046c0498",
            "93ea4ce0d89e463d8644e2710d073ba4",
            "060d3460ac134361b9ca0c8cbf727ada",
            "e83a759ff32a4b81861a89abd296d2f5",
            "6d8fe4db91b240e7a9efcb401f743845",
            "8c985e198151422482a6125cde02cec1",
            "02c6ea04f4d949c6b6fd58bb6ff9b79a",
            "2f654ff010414b9ba248d35aa33debe8",
            "6dbca0ca8e58438d9d4ed93f647e4545",
            "5126843824a74712abfeb58e7297087a",
            "ce7d7f264b5147678ce6745192592920",
            "f5f01dd80b5b440cb83ffc370fffd0a5",
            "67c20183d2c64b0ab576c958cf366ec4",
            "793ce1ed26194d21ab86adb5df2259aa",
            "e16e49ca300f4be28c2bd6efd6bb25e4",
            "6d5cbf93156f4d82a1526b79b6a2c43d",
            "3e19d97998914b47b41641cba3a2cac9",
            "36ec63f0c8c644768eef949083ba7379",
            "04d5ec674dc94437aa32511881faa6f9",
            "cec2a62c4fb74f3c8715e15804048c31",
            "e462a3b18ee84c7ab3891e2520b66852"
          ]
        },
        "id": "5ZthQSeQZE7e",
        "outputId": "09ae8cfb-209e-4f32-9248-7b8ee72207fd"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/huggingface_hub/utils/_auth.py:94: UserWarning: \n",
            "The secret `HF_TOKEN` does not exist in your Colab secrets.\n",
            "To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n",
            "You will be able to reuse this secret in all of your notebooks.\n",
            "Please note that authentication is recommended but still optional to access public models or datasets.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "tokenizer_config.json: 0.00B [00:00, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "baf90868de9847a391bfd4f89fd794fe"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "vocab.json: 0.00B [00:00, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "18b3054de4ad4391a611f490be56abba"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "merges.txt: 0.00B [00:00, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "19a362b1af5b4c55a2e638cb20bcd289"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "tokenizer.json: 0.00B [00:00, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "c1c7fc8bd65642afb84959f378cde9c0"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "added_tokens.json:   0%|          | 0.00/87.0 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "0cff3bd15cfc4be4ab3f61ce467fd563"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "special_tokens_map.json:   0%|          | 0.00/701 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "b300a3878ca740d3b625150d8c3212a6"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "config.json:   0%|          | 0.00/786 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "6c087cc1e50f46b09ea938f54a7d75e7"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "model.safetensors.index.json: 0.00B [00:00, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "86bbb3cea2d9420e97750419564c2f1a"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Fetching 2 files:   0%|          | 0/2 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "0b0948412bb9411d82ab3c18c4f88ec6"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "model-00001-of-00002.safetensors:   0%|          | 0.00/5.00G [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "b5bcf10d8e1c4e1b9a6aeb746fdd8534"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "model-00002-of-00002.safetensors:   0%|          | 0.00/67.1M [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "35b1965e81ef483eb1910c8e23db7268"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "33771aa5bb8a47208035349426bb98d2"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "generation_config.json:   0%|          | 0.00/137 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "ce7d7f264b5147678ce6745192592920"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Colab notebook detected. To show errors in colab notebook, set debug=True in launch()\n",
            "* Running on public URL: https://7896f0936b5117b375.gradio.live\n",
            "\n",
            "This share link expires in 1 week. For free permanent hosting and GPU upgrades, run `gradio deploy` from the terminal in the working directory to deploy to Hugging Face Spaces (https://huggingface.co/spaces)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<div><iframe src=\"https://7896f0936b5117b375.gradio.live\" width=\"100%\" height=\"500\" allow=\"autoplay; camera; microphone; clipboard-read; clipboard-write;\" frameborder=\"0\" allowfullscreen></iframe></div>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": []
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0e11e8b4",
        "outputId": "d72f752d-7bbd-4ae3-9efc-831aac0057f0"
      },
      "source": [
        "%pip install streamlit"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting streamlit\n",
            "  Downloading streamlit-1.49.1-py3-none-any.whl.metadata (9.5 kB)\n",
            "Requirement already satisfied: altair!=5.4.0,!=5.4.1,<6,>=4.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (5.5.0)\n",
            "Requirement already satisfied: blinker<2,>=1.5.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (1.9.0)\n",
            "Requirement already satisfied: cachetools<7,>=4.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (5.5.2)\n",
            "Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (8.2.1)\n",
            "Requirement already satisfied: numpy<3,>=1.23 in /usr/local/lib/python3.12/dist-packages (from streamlit) (2.0.2)\n",
            "Requirement already satisfied: packaging<26,>=20 in /usr/local/lib/python3.12/dist-packages (from streamlit) (25.0)\n",
            "Requirement already satisfied: pandas<3,>=1.4.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (2.2.2)\n",
            "Requirement already satisfied: pillow<12,>=7.1.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (11.3.0)\n",
            "Requirement already satisfied: protobuf<7,>=3.20 in /usr/local/lib/python3.12/dist-packages (from streamlit) (5.29.5)\n",
            "Requirement already satisfied: pyarrow>=7.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (18.1.0)\n",
            "Requirement already satisfied: requests<3,>=2.27 in /usr/local/lib/python3.12/dist-packages (from streamlit) (2.32.4)\n",
            "Requirement already satisfied: tenacity<10,>=8.1.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (8.5.0)\n",
            "Requirement already satisfied: toml<2,>=0.10.1 in /usr/local/lib/python3.12/dist-packages (from streamlit) (0.10.2)\n",
            "Requirement already satisfied: typing-extensions<5,>=4.4.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (4.15.0)\n",
            "Requirement already satisfied: watchdog<7,>=2.1.5 in /usr/local/lib/python3.12/dist-packages (from streamlit) (6.0.0)\n",
            "Requirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in /usr/local/lib/python3.12/dist-packages (from streamlit) (3.1.45)\n",
            "Collecting pydeck<1,>=0.8.0b4 (from streamlit)\n",
            "  Downloading pydeck-0.9.1-py2.py3-none-any.whl.metadata (4.1 kB)\n",
            "Requirement already satisfied: tornado!=6.5.0,<7,>=6.0.3 in /usr/local/lib/python3.12/dist-packages (from streamlit) (6.4.2)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.12/dist-packages (from altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (3.1.6)\n",
            "Requirement already satisfied: jsonschema>=3.0 in /usr/local/lib/python3.12/dist-packages (from altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (4.25.1)\n",
            "Requirement already satisfied: narwhals>=1.14.2 in /usr/local/lib/python3.12/dist-packages (from altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (2.2.0)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.12/dist-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.12)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.12/dist-packages (from pandas<3,>=1.4.0->streamlit) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.12/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.12/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n",
            "Requirement already satisfied: charset_normalizer<4,>=2 in /usr/local/lib/python3.12/dist-packages (from requests<3,>=2.27->streamlit) (3.4.3)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.12/dist-packages (from requests<3,>=2.27->streamlit) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.12/dist-packages (from requests<3,>=2.27->streamlit) (2.5.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.12/dist-packages (from requests<3,>=2.27->streamlit) (2025.8.3)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.12/dist-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (5.0.2)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.12/dist-packages (from jinja2->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (3.0.2)\n",
            "Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.12/dist-packages (from jsonschema>=3.0->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (25.3.0)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.12/dist-packages (from jsonschema>=3.0->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (2025.4.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.12/dist-packages (from jsonschema>=3.0->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (0.36.2)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.12/dist-packages (from jsonschema>=3.0->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (0.27.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.12/dist-packages (from python-dateutil>=2.8.2->pandas<3,>=1.4.0->streamlit) (1.17.0)\n",
            "Downloading streamlit-1.49.1-py3-none-any.whl (10.0 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m10.0/10.0 MB\u001b[0m \u001b[31m55.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading pydeck-0.9.1-py2.py3-none-any.whl (6.9 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.9/6.9 MB\u001b[0m \u001b[31m83.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: pydeck, streamlit\n",
            "Successfully installed pydeck-0.9.1 streamlit-1.49.1\n"
          ]
        }
      ]
    }
  ]
}